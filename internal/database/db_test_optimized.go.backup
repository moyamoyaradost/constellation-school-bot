package database

import (
	"context"
	"database/sql"
	"sync"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/modules/postgres"
	"github.com/testcontainers/testcontainers-go/wait"
)

// Настройка тестовой БД
func setupTestDB(t *testing.T) *sql.DB {
	ctx := context.Background()
	
	postgresContainer, err := postgres.Run(ctx, "postgres:16",
		postgres.WithDatabase("testdb"),
		postgres.WithUsername("testuser"), 
		postgres.WithPassword("testpass"),
		testcontainers.WithWaitStrategy(
			wait.ForLog("database system is ready to accept connections").
				WithOccurrence(2).WithStartupTimeout(30*time.Second)),
	)
	require.NoError(t, err)

	connectionString, err := postgresContainer.ConnectionString(ctx, "sslmode=disable")
	require.NoError(t, err)

	db, err := sql.Open("postgres", connectionString)
	require.NoError(t, err)
	require.NoError(t, db.Ping())
	require.NoError(t, createTables(db))
	require.NoError(t, insertDefaultSubjects(db))

	t.Cleanup(func() {
		db.Close()
		postgresContainer.Terminate(ctx)
	})
	return db
}

// Тест базовых операций с пользователями
func TestBasicUserOperations(t *testing.T) {
	db := setupTestDB(t)

	// Создание пользователя
	userID, err := createUser(db, "123456789", "student", "Тест Тестов", "79001234567")
	assert.NoError(t, err)
	assert.Greater(t, userID, 0)

	// Проверка существования
	var count int
	err = db.QueryRow("SELECT COUNT(*) FROM users WHERE tg_id = '123456789'").Scan(&count)
	assert.NoError(t, err)
	assert.Equal(t, 1, count)
}

// Тест записи на урок с очередью
func TestEnrollmentWithWaitlist(t *testing.T) {
	db := setupTestDB(t)

	// Создание преподавателя и урока
	teacherID, err := createUser(db, "111111111", "teacher", "Преподаватель", "79001111111")
	require.NoError(t, err)
	_, err = db.Exec("INSERT INTO teachers (user_id) VALUES ($1)", teacherID)
	require.NoError(t, err)
	
	var teacherRecordID int
	err = db.QueryRow("SELECT id FROM teachers WHERE user_id = $1", teacherID).Scan(&teacherRecordID)
	require.NoError(t, err)

	lessonID := createTestLesson(t, db, teacherRecordID, 2) // Урок на 2 места

	// Создание студентов
	student1ID, err := createUser(db, "222222222", "student", "Студент1", "79002222222")
	require.NoError(t, err)
	student2ID, err := createUser(db, "333333333", "student", "Студент2", "79003333333")
	require.NoError(t, err)
	student3ID, err := createUser(db, "444444444", "student", "Студент3", "79004444444")
	require.NoError(t, err)

	_, err = db.Exec("INSERT INTO students (user_id) VALUES ($1), ($2), ($3)", 
		student1ID, student2ID, student3ID)
	require.NoError(t, err)

	// Записываем первых двух студентов
	err = enrollStudent(db, lessonID, student1ID, "student")
	assert.NoError(t, err)
	err = enrollStudent(db, lessonID, student2ID, "student") 
	assert.NoError(t, err)

	// Третий студент попадает в очередь
	err = enrollStudent(db, lessonID, student3ID, "student")
	assert.NoError(t, err)

	// Проверяем статусы
	var status1, status3 string
	err = db.QueryRow("SELECT status FROM enrollments WHERE lesson_id = $1 AND student_id = (SELECT id FROM students WHERE user_id = $2)", 
		lessonID, student1ID).Scan(&status1)
	assert.NoError(t, err)
	assert.Equal(t, "enrolled", status1)

	err = db.QueryRow("SELECT status FROM enrollments WHERE lesson_id = $1 AND student_id = (SELECT id FROM students WHERE user_id = $2)", 
		lessonID, student3ID).Scan(&status3)
	assert.NoError(t, err)  
	assert.Equal(t, "waitlisted", status3)
}

// Тест безопасности транзакций при одновременной записи
func TestConcurrentEnrollments(t *testing.T) {
	db := setupTestDB(t)

	// Создание урока на 1 место
	teacherID, err := createUser(db, "555555555", "teacher", "Преп", "79005555555")
	require.NoError(t, err)
	_, err = db.Exec("INSERT INTO teachers (user_id) VALUES ($1)", teacherID)
	require.NoError(t, err)
	
	var teacherRecordID int
	err = db.QueryRow("SELECT id FROM teachers WHERE user_id = $1", teacherID).Scan(&teacherRecordID)
	require.NoError(t, err)

	lessonID := createTestLesson(t, db, teacherRecordID, 1)

	// Создание двух студентов  
	student1ID, err := createUser(db, "666666666", "student", "Студент1", "79006666666")
	require.NoError(t, err)
	student2ID, err := createUser(db, "777777777", "student", "Студент2", "79007777777")
	require.NoError(t, err)

	_, err = db.Exec("INSERT INTO students (user_id) VALUES ($1), ($2)", student1ID, student2ID)
	require.NoError(t, err)

	// Одновременная запись двух студентов
	var wg sync.WaitGroup
	errors := make(chan error, 2)

	wg.Add(2)
	go func() {
		defer wg.Done()
		errors <- enrollStudent(db, lessonID, student1ID, "student")
	}()
	go func() {
		defer wg.Done()
		errors <- enrollStudent(db, lessonID, student2ID, "student")
	}()

	wg.Wait()
	close(errors)

	// Оба запроса должны пройти без ошибок (один enrolled, один waitlisted)
	for err := range errors {
		assert.NoError(t, err)
	}

	// Проверяем что только один студент enrolled
	var enrolledCount int
	err = db.QueryRow("SELECT COUNT(*) FROM enrollments WHERE lesson_id = $1 AND status = 'enrolled'", 
		lessonID).Scan(&enrolledCount)
	assert.NoError(t, err)
	assert.Equal(t, 1, enrolledCount)
}

// Вспомогательная функция создания тестового урока
func createTestLesson(t *testing.T, db *sql.DB, teacherID int, maxStudents int) int {
	var lessonID int
	err := db.QueryRow(`
		INSERT INTO lessons (teacher_id, subject_id, start_time, max_students, status) 
		VALUES ($1, 1, NOW() + INTERVAL '1 day', $2, 'active') 
		RETURNING id`,
		teacherID, maxStudents).Scan(&lessonID)
	require.NoError(t, err)
	return lessonID
}
