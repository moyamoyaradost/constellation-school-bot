package handlers

import (
	"database/sql"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Основной обработчик сообщений - только маршрутизация
func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	log.Printf("Получен update от пользователя %d", getUserID(update))
	
	if update.Message != nil {
		handleMessage(bot, update.Message, db)
	} else if update.CallbackQuery != nil {
		handleCallbackQuery(bot, update.CallbackQuery, db)
	}
}

// Обработка текстовых сообщений
func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	if message.IsCommand() {
		handleCommand(bot, message, db)
	} else {
		handleTextMessage(bot, message, db)
	}
}

// Маршрутизация команд
func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	switch message.Command() {
	// Базовые команды
	case "start":
		handleStart(bot, message, db)
	case "register":
		handleRegister(bot, message, db)
	case "help":
		handleHelp(bot, message, db)
	
	// Команды студентов
	case "schedule", "subjects", "enroll", "waitlist", "my_lessons":
		handleStudentCommand(bot, message, db)
	
	// Команды преподавателей  
	case "my_students", "cancel_lesson":
		handleTeacherCommand(bot, message, db)
	
	// Админские команды
	case "add_teacher", "delete_teacher", "notify_students", "stats":
		handleAdminCommand(bot, message, db)
	
	default:
		sendMessage(bot, message.Chat.ID, "❓ Неизвестная команда. Используйте /help")
	}
}

// Обработка callback запросов
func handleCallbackQuery(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	// Здесь будет обработка inline кнопок
	sendMessage(bot, query.Message.Chat.ID, "⚙️ Функция в разработке")
}
