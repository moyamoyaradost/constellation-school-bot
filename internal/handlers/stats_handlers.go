package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiting
func handleRateLimitStatsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting
	stats := getRateLimitDetailedStats(db)
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rate Limiting**\n\n"
	
	if len(stats) == 0 {
		reportText += "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
	} else {
		reportText += "üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**\n\n"
		
		for _, stat := range stats {
			reportText += fmt.Sprintf("üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** %s\n", stat.UserName)
			reportText += fmt.Sprintf("üÜî **Telegram ID:** %s\n", stat.TelegramID)
			reportText += fmt.Sprintf("üìù **–û–ø–µ—Ä–∞—Ü–∏—è:** %s\n", stat.OperationType)
			reportText += fmt.Sprintf("‚è∞ **–ù–∞—á–∞—Ç–∞:** %s\n", stat.StartedAt.Format("02.01.2006 15:04:05"))
			reportText += fmt.Sprintf("‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** %s\n", time.Since(stat.StartedAt).Round(time.Second))
			reportText += "---\n"
		}
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, reportText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
func handleStatsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
	stats := getBasicSystemStats(db)
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
	
	reportText += fmt.Sprintf("üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n")
	reportText += fmt.Sprintf("‚Ä¢ –í—Å–µ–≥–æ: %d\n", stats.TotalUsers)
	reportText += fmt.Sprintf("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: %d\n", stats.ActiveUsers)
	reportText += fmt.Sprintf("‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç–æ–≤: %d\n", stats.Students)
	reportText += fmt.Sprintf("‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: %d\n", stats.Teachers)
	reportText += fmt.Sprintf("‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %d\n\n", stats.Admins)
	
	reportText += fmt.Sprintf("üìö **–£—Ä–æ–∫–∏:**\n")
	reportText += fmt.Sprintf("‚Ä¢ –í—Å–µ–≥–æ: %d\n", stats.TotalLessons)
	reportText += fmt.Sprintf("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: %d\n", stats.ActiveLessons)
	reportText += fmt.Sprintf("‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: %d\n\n", stats.CancelledLessons)
	
	reportText += fmt.Sprintf("üìù **–ó–∞–ø–∏—Å–∏:**\n")
	reportText += fmt.Sprintf("‚Ä¢ –í—Å–µ–≥–æ: %d\n", stats.TotalEnrollments)
	reportText += fmt.Sprintf("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: %d\n", stats.ActiveEnrollments)
	reportText += fmt.Sprintf("‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: %d\n\n", stats.CancelledEnrollments)
	
	reportText += fmt.Sprintf("‚è∞ **–õ–∏—Å—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è:**\n")
	reportText += fmt.Sprintf("‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d\n\n", stats.WaitlistEntries)
	
	reportText += fmt.Sprintf("üîÑ **Rate Limiting:**\n")
	reportText += fmt.Sprintf("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: %d\n", stats.ActiveRateLimitOperations)
	
	msg := tgbotapi.NewMessage(message.Chat.ID, reportText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting
type RateLimitStat struct {
	UserName      string
	TelegramID    string
	OperationType string
	StartedAt     time.Time
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting
func getRateLimitDetailedStats(db *sql.DB) []RateLimitStat {
	rows, err := db.Query(`
		SELECT u.full_name, u.tg_id, po.operation_type, po.started_at
		FROM pending_operations po
		JOIN users u ON po.user_id = u.id
		WHERE po.finished_at IS NULL
		ORDER BY po.started_at DESC`)
	
	if err != nil {
		return []RateLimitStat{}
	}
	defer rows.Close()
	
	var stats []RateLimitStat
	for rows.Next() {
		var stat RateLimitStat
		if err := rows.Scan(&stat.UserName, &stat.TelegramID, &stat.OperationType, &stat.StartedAt); err != nil {
			continue
		}
		stats = append(stats, stat)
	}
	
	return stats
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
type BasicSystemStats struct {
	TotalUsers                    int
	ActiveUsers                   int
	Students                      int
	Teachers                      int
	Admins                        int
	TotalLessons                  int
	ActiveLessons                 int
	CancelledLessons              int
	TotalEnrollments              int
	ActiveEnrollments             int
	CancelledEnrollments          int
	WaitlistEntries               int
	ActiveRateLimitOperations     int
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
func getBasicSystemStats(db *sql.DB) BasicSystemStats {
	var stats BasicSystemStats
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	db.QueryRow("SELECT COUNT(*) FROM users").Scan(&stats.TotalUsers)
	db.QueryRow("SELECT COUNT(*) FROM users WHERE is_active = true").Scan(&stats.ActiveUsers)
	db.QueryRow("SELECT COUNT(*) FROM students WHERE soft_deleted = false").Scan(&stats.Students)
	db.QueryRow("SELECT COUNT(*) FROM teachers WHERE soft_deleted = false").Scan(&stats.Teachers)
	db.QueryRow("SELECT COUNT(*) FROM users WHERE role = 'superuser'").Scan(&stats.Admins)
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–∫–æ–≤
	db.QueryRow("SELECT COUNT(*) FROM lessons").Scan(&stats.TotalLessons)
	db.QueryRow("SELECT COUNT(*) FROM lessons WHERE soft_deleted = false").Scan(&stats.ActiveLessons)
	db.QueryRow("SELECT COUNT(*) FROM lessons WHERE soft_deleted = true").Scan(&stats.CancelledLessons)
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
	db.QueryRow("SELECT COUNT(*) FROM enrollments").Scan(&stats.TotalEnrollments)
	db.QueryRow("SELECT COUNT(*) FROM enrollments WHERE status = 'enrolled'").Scan(&stats.ActiveEnrollments)
	db.QueryRow("SELECT COUNT(*) FROM enrollments WHERE status = 'cancelled'").Scan(&stats.CancelledEnrollments)
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—Å—Ç–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è
	db.QueryRow("SELECT COUNT(*) FROM waitlist").Scan(&stats.WaitlistEntries)
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiting
	db.QueryRow("SELECT COUNT(*) FROM pending_operations WHERE finished_at IS NULL").Scan(&stats.ActiveRateLimitOperations)
	
	return stats
}
