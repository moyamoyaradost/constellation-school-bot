package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ SuperUser)
func handleDeleteLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)

	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤")
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/delete_lesson <lesson_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/delete_lesson 15`\n" +
			"‚Ä¢ `/delete_lesson 22`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ (soft delete)\n" +
			"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n" +
			"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è\n" +
			"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/restore_lesson` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞\n" +
			"‚Ä¢ `/cancel_with_notification` - –æ—Ç–º–µ–Ω–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"

		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º lesson_id
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
	var subjectName, teacherName string
	var startTime string
	var teacherID int
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time::text, l.teacher_id
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime, &teacherID)

	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	var studentIDs []int
	rows, err := db.Query(`
		SELECT DISTINCT u.id
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1 AND e.status = 'enrolled'`, lessonID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}
	defer rows.Close()

	for rows.Next() {
		var studentID int
		if err := rows.Scan(&studentID); err != nil {
			continue
		}
		studentIDs = append(studentIDs, studentID)
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}
	defer tx.Rollback()

	// –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ (soft delete)
	_, err = tx.Exec("UPDATE lessons SET soft_deleted = true WHERE id = $1", lessonID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞")
		return
	}

	// –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫
	_, err = tx.Exec("UPDATE enrollments SET status = 'cancelled' WHERE lesson_id = $1", lessonID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π")
		return
	}

	// –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
	_, err = tx.Exec("DELETE FROM waitlist WHERE lesson_id = $1", lessonID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è")
		return
	}

	// –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	notificationText := fmt.Sprintf("‚ùå **–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"+
		"üìö –£—Ä–æ–∫: %s\n"+
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n"+
		"‚è∞ –í—Ä–µ–º—è: %s\n\n"+
		"–£—Ä–æ–∫ –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", subjectName, teacherName, startTime[:16])

	sentCount := 0
	failedCount := 0

	for _, studentID := range studentIDs {
		// –ü–æ–ª—É—á–∞–µ–º tg_id —Å—Ç—É–¥–µ–Ω—Ç–∞
		var tgID int64
		err := db.QueryRow("SELECT tg_id FROM users WHERE id = $1", studentID).Scan(&tgID)
		if err != nil {
			failedCount++
			continue
		}

		msg := tgbotapi.NewMessage(tgID, notificationText)
		msg.ParseMode = "Markdown"
		if _, err := bot.Send(msg); err != nil {
			failedCount++
		} else {
			sentCount++
		}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
	LogSystemAction(db, "lesson_deleted", fmt.Sprintf("–£—Ä–æ–∫ %d (%s) —É–¥–∞–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: %d, –æ—à–∏–±–æ–∫: %d", lessonID, subjectName, sentCount, failedCount))

	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω**\n\n" +
		"üìö –£—Ä–æ–∫: " + subjectName + " (" + startTime[:16] + ")\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n\n" +
		"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + strconv.Itoa(sentCount) + "\n" +
		"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + strconv.Itoa(failedCount) + "\n\n" +
		"üíæ –£—Ä–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π (soft delete)\n" +
		"üìù –ó–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã\n" +
		"üóëÔ∏è –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–∏—â–µ–Ω"

	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}
