package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
type UserState string

const (
	StateIdle            UserState = "idle"
	StateWaitingName     UserState = "waiting_name"
	StateWaitingPhone    UserState = "waiting_phone"
	StateSelectingSubjects UserState = "selecting_subjects"
	StateRegistered      UserState = "registered"
)

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
var userStates = make(map[int64]UserState)
var userData = make(map[int64]map[string]interface{})

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func initUserData(userID int64) {
	if userData[userID] == nil {
		userData[userID] = make(map[string]interface{})
	}
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getUserState(userID int64) UserState {
	if state, exists := userStates[userID]; exists {
		return state
	}
	return StateIdle
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func setUserState(userID int64, state UserState) {
	userStates[userID] = state
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
func handleStart(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	var existingUser int
	err := db.QueryRow("SELECT id FROM users WHERE tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&existingUser)
	
	var msg tgbotapi.MessageConfig
	
	if err == sql.ErrNoRows {
		// –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		msg = tgbotapi.NewMessage(message.Chat.ID, 
			"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Constellation School Bot!\n\n"+
			"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã –¶–µ–Ω—Ç—Ä–∞ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–∞.\n\n"+
			"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"+
			"–ù–∞–∂–º–∏—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")
		
		// Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "cmd_register"),
				tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "cmd_help"),
			),
		)
		msg.ReplyMarkup = keyboard
		
	} else if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		msg = tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	} else {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		var role string
		db.QueryRow("SELECT role FROM users WHERE tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&role)
		
		switch role {
		case "student":
			msg = tgbotapi.NewMessage(message.Chat.ID,
				"üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"+
				"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n"+
				"/subjects - –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"+
				"/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n"+
				"/my_lessons - –º–æ–∏ —É—Ä–æ–∫–∏\n"+
				"/help - –ø–æ–º–æ—â—å")
		case "teacher":
			msg = tgbotapi.NewMessage(message.Chat.ID,
				"üë®‚Äçüè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!\n\n"+
				"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
				"/my_lessons - –º–æ–∏ —É—Ä–æ–∫–∏\n"+
				"/my_students - –º–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã\n"+
				"/help_teacher - –ø–æ–º–æ—â—å")
		case "superuser":
			msg = tgbotapi.NewMessage(message.Chat.ID,
				"üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"+
				"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
				"/add_teacher - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"+
				"/create_lesson - —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫\n"+
				"/system_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
		default:
			msg = tgbotapi.NewMessage(message.Chat.ID, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
		}
	}
	
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
func handleRegister(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	var existingUser int
	err := db.QueryRow("SELECT id FROM users WHERE tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&existingUser)
	
	if err == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
		bot.Send(msg)
		return
	}
	
	// –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	initUserData(userID)
	setUserState(userID, StateWaitingName)
	
	msg := tgbotapi.NewMessage(message.Chat.ID,
		"üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"+
		"–®–∞–≥ 1 –∏–∑ 3: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)")
	
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è FSM
func handleTextMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	state := getUserState(userID)
	
	switch state {
	case StateWaitingName:
		handleNameInput(bot, message, db)
	case StateWaitingPhone:
		handlePhoneInput(bot, message, db)
	case StateSelectingSubjects:
		handleSubjectSelection(bot, message, db)
	default:
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		bot.Send(msg)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
func handleNameInput(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	name := strings.TrimSpace(message.Text)
	
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
	if len(name) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
		bot.Send(msg)
		return
	}
	
	// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è
	initUserData(userID)
	userData[userID]["full_name"] = name
	setUserState(userID, StateWaitingPhone)
	
	msg := tgbotapi.NewMessage(message.Chat.ID,
		fmt.Sprintf("‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s\n\n"+
		"–®–∞–≥ 2 –∏–∑ 3: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123 45 67)", name))
	
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func handlePhoneInput(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	phone := strings.TrimSpace(message.Text)
	
	// –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	if len(phone) < 10 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
		bot.Send(msg)
		return
	}
	
	// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
	userData[userID]["phone"] = phone
	setUserState(userID, StateSelectingSubjects)
	
	// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
	showSubjectsKeyboard(bot, message, db)
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
func showSubjectsKeyboard(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –ë–î
	rows, err := db.Query("SELECT id, name, description FROM subjects WHERE is_active = true ORDER BY name")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
		bot.Send(msg)
		return
	}
	defer rows.Close()
	
	var buttons [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton
	
	for rows.Next() {
		var id int
		var name, description string
		if err := rows.Scan(&id, &name, &description); err != nil {
			continue
		}
		
		button := tgbotapi.NewInlineKeyboardButtonData(name, fmt.Sprintf("subject_%d", id))
		row = append(row, button)
		
		// –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
		if len(row) == 2 {
			buttons = append(buttons, row)
			row = []tgbotapi.InlineKeyboardButton{}
		}
	}
	
	// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
	if len(row) > 0 {
		buttons = append(buttons, row)
	}
	
	// –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "finish_registration"),
	))
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	
	msg := tgbotapi.NewMessage(message.Chat.ID,
		"üéØ –®–∞–≥ 3 –∏–∑ 3: –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –ø—Ä–µ–¥–º–µ—Ç—ã\n\n"+
		"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'")
	msg.ReplyMarkup = keyboard
	
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—á–µ—Ä–µ–∑ callback)
func handleSubjectSelection(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å callback –∑–∞–ø—Ä–æ—Å—ã
	msg := tgbotapi.NewMessage(message.Chat.ID,
		"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
	bot.Send(msg)
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
func finishStudentRegistration(bot *tgbotapi.BotAPI, userID int64, chatID int64, db *sql.DB) {
	// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	data := userData[userID]
	fullName := data["full_name"].(string)
	phone := data["phone"].(string)
	
	var selectedSubjects []int
	if subjects, exists := data["selected_subjects"]; exists {
		selectedSubjects = subjects.([]int)
	}
	
	// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	var userDBID int
	err := db.QueryRow(`
		INSERT INTO users (tg_id, role, full_name, phone) 
		VALUES ($1, 'student', $2, $3) 
		RETURNING id`,
		strconv.FormatInt(userID, 10), fullName, phone).Scan(&userDBID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}
	
	// –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞
	var studentDBID int
	err = db.QueryRow(`
		INSERT INTO students (user_id, selected_subjects) 
		VALUES ($1, $2) 
		RETURNING id`,
		userDBID, fmt.Sprintf("{%s}", strings.Join(intSliceToStringSlice(selectedSubjects), ","))).Scan(&studentDBID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}
	
	// –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ FSM
	delete(userStates, userID)
	delete(userData, userID)
	
	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	var subjectNames []string
	for _, subjectID := range selectedSubjects {
		var name string
		db.QueryRow("SELECT name FROM subjects WHERE id = $1", subjectID).Scan(&name)
		subjectNames = append(subjectNames, name)
	}
	
	msg := tgbotapi.NewMessage(chatID,
		"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"+
		fmt.Sprintf("üë§ –ò–º—è: %s\n", fullName)+
		fmt.Sprintf("üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n", phone)+
		fmt.Sprintf("üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: %s\n\n", strings.Join(subjectNames, ", "))+
		"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"+
		"/schedule - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n"+
		"/my_lessons - –º–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫–∏\n"+
		"/subjects - –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
	
	bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ []int –≤ []string
func intSliceToStringSlice(ints []int) []string {
	strings := make([]string, len(ints))
	for i, v := range ints {
		strings[i] = strconv.Itoa(v)
	}
	return strings
}
