package handlers

import (
"database/sql"
"log"
"strconv"

tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
type UserState string

const (
StateIdle        UserState = "idle"
StateWaitingName UserState = "waiting_name" 
StateWaitingPhone UserState = "waiting_phone"
StateRegistered  UserState = "registered"
)

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - Redis)
var userStates = make(map[int64]UserState)
var userData = make(map[int64]map[string]interface{})

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getUserState(userID int64) UserState {
	if state, exists := userStates[userID]; exists {
		return state
	}
	return StateIdle
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func setUserState(userID int64, state UserState) {
	userStates[userID] = state
}

// –ö–æ–º–∞–Ω–¥–∞ /start
func handleStart(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	var existingUser int
	err := db.QueryRow("SELECT id FROM users WHERE tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&existingUser)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, 
"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Constellation School!\n\n"+
"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register")
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
	} else {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
		handleMainMenu(bot, message, db)
	}
}

// –ö–æ–º–∞–Ω–¥–∞ /register
func handleRegister(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	setUserState(userID, StateWaitingName)
	
	if userData[userID] == nil {
		userData[userID] = make(map[string]interface{})
	}
	
	sendMessage(bot, message.Chat.ID, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ FSM
func handleTextMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	state := getUserState(userID)
	
	switch state {
	case StateWaitingName:
		if len(message.Text) < 2 {
			sendMessage(bot, message.Chat.ID, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
			return
		}
		userData[userID]["full_name"] = message.Text
		setUserState(userID, StateWaitingPhone)
		sendMessage(bot, message.Chat.ID, "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: +79001234567):")
		
	case StateWaitingPhone:
		if len(message.Text) < 10 {
			sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
			return
		}
		userData[userID]["phone"] = message.Text
		
		// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		err := finishRegistration(userID, message.Chat.ID, db)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		} else {
			sendMessage(bot, message.Chat.ID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥")
		}
		setUserState(userID, StateRegistered)
		
	default:
		sendMessage(bot, message.Chat.ID, "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
	}
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func finishRegistration(userID int64, chatID int64, db *sql.DB) error {
	fullName := userData[userID]["full_name"].(string)
	phone := userData[userID]["phone"].(string)
	
	query := "INSERT INTO users (tg_id, role, full_name, phone) VALUES ($1, $2, $3, $4)"
	_, err := db.Exec(query, strconv.FormatInt(userID, 10), "student", fullName, phone)
	if err != nil {
		return err
	}
	
	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
	var userRecordID int
	err = db.QueryRow("SELECT id FROM users WHERE tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&userRecordID)
	if err != nil {
		return err
	}
	
	_, err = db.Exec("INSERT INTO students (user_id) VALUES ($1)", userRecordID)
	return err
}
