package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫ (–¥–ª—è inline-–∫–Ω–æ–ø–æ–∫)
func handleEnrollCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&role)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
		return
	}

	// –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		sendMessage(bot, message.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —É—Ä–æ–∫–∞: /enroll <lesson_id>")
		return
	}

	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
	var subjectName, teacherName string
	var startTime string
	var maxStudents int
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time::text, l.max_students
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime, &maxStudents)

	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
	var studentID int
	err = db.QueryRow("SELECT s.id FROM students s JOIN users u ON s.user_id = u.id WHERE u.tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&studentID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫
	var existingEnrollment int
	err = db.QueryRow("SELECT COUNT(*) FROM enrollments WHERE student_id = $1 AND lesson_id = $2", studentID, lessonID).Scan(&existingEnrollment)
	if err == nil && existingEnrollment > 0 {
		sendMessage(bot, message.Chat.ID, "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	var enrolledCount int
	err = db.QueryRow("SELECT COUNT(*) FROM enrollments WHERE lesson_id = $1 AND status = 'enrolled'", lessonID).Scan(&enrolledCount)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö")
		return
	}

	if enrolledCount >= maxStudents {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
		var waitlistPosition int
		err = db.QueryRow("SELECT COALESCE(MAX(position), 0) + 1 FROM waitlist WHERE lesson_id = $1", lessonID).Scan(&waitlistPosition)
		if err != nil {
			waitlistPosition = 1
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
		_, err = db.Exec("INSERT INTO waitlist (student_id, lesson_id, position) VALUES ($1, $2, $3)", studentID, lessonID, waitlistPosition)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
			return
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
		LogUserAction(db, "waitlist_added", userID, fmt.Sprintf("–£—Ä–æ–∫ %d (%s), –ø–æ–∑–∏—Ü–∏—è: %d", lessonID, subjectName, waitlistPosition))

		resultText := fmt.Sprintf("‚è≥ **–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è**\n\n"+
			"üìö –£—Ä–æ–∫: %s\n"+
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n"+
			"‚è∞ –í—Ä–µ–º—è: %s\n"+
			"üìã –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: %d\n\n"+
			"–í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã, –µ—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ.", subjectName, teacherName, startTime[:16], waitlistPosition)

		msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —É—Ä–æ–∫
	_, err = db.Exec("INSERT INTO enrollments (student_id, lesson_id, status) VALUES ($1, $2, 'enrolled')", studentID, lessonID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫")
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫
	LogUserAction(db, "lesson_enrolled", userID, fmt.Sprintf("–£—Ä–æ–∫ %d (%s)", lessonID, subjectName))

	resultText := fmt.Sprintf("‚úÖ **–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Ä–æ–∫!**\n\n"+
		"üìö –£—Ä–æ–∫: %s\n"+
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n"+
		"‚è∞ –í—Ä–µ–º—è: %s\n"+
		"üë• –ó–∞–ø–∏—Å–∞–Ω–æ: %d/%d\n\n"+
		"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —É—Ä–æ–∫—É!", subjectName, teacherName, startTime[:16], enrolledCount+1, maxStudents)

	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É—Ä–æ–∫–∞
func handleUnenrollCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
		return
	}

	// –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		sendMessage(bot, message.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —É—Ä–æ–∫–∞: /unenroll <lesson_id>")
		return
	}

	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
	var studentID int
	err = db.QueryRow("SELECT s.id FROM students s JOIN users u ON s.user_id = u.id WHERE u.tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&studentID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫
	var enrollmentID int
	err = db.QueryRow("SELECT id FROM enrollments WHERE student_id = $1 AND lesson_id = $2 AND status = 'enrolled'", studentID, lessonID).Scan(&enrollmentID)
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏")
		return
	}

	// –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç —É—Ä–æ–∫–∞
	_, err = db.Exec("UPDATE enrollments SET status = 'cancelled' WHERE id = $1", enrollmentID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É—Ä–æ–∫–∞")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å
	_, err = db.Exec("DELETE FROM waitlist WHERE student_id = $1 AND lesson_id = $2", studentID, lessonID)
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	var subjectName, teacherName string
	var startTime string
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time::text
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1`, lessonID).Scan(&subjectName, &teacherName, &startTime)

	// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø–∏—Å–∫—É –æ—Ç —É—Ä–æ–∫–∞
	LogUserAction(db, "lesson_unenrolled", userID, fmt.Sprintf("–£—Ä–æ–∫ %d (%s)", lessonID, subjectName))

	resultText := fmt.Sprintf("‚ùå **–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É—Ä–æ–∫–∞**\n\n"+
		"üìö –£—Ä–æ–∫: %s\n"+
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n"+
		"‚è∞ –í—Ä–µ–º—è: %s\n\n"+
		"–ú–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.", subjectName, teacherName, startTime[:16])

	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}
