package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
func createStudentMainMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"),
			tgbotapi.NewInlineKeyboardButtonData("üìö –ú–æ–∏ —É—Ä–æ–∫–∏", "my_lessons"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile"),
		),
	)
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func createTeacherMainMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ú–æ–∏ —É—Ä–æ–∫–∏", "my_lessons"),
			tgbotapi.NewInlineKeyboardButtonData("üë• –ú–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã", "my_students"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫", "create_lesson"),
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫", "cancel_lesson"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help_teacher"),
		),
	)
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func createAdminMainMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "teachers"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notifications"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –õ–æ–≥–∏", "logs"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help_admin"),
		),
	)
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
func createSubjectsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéÆ –ì–µ–π–º–¥–µ–≤", "subject_GAMEDEV"),
			tgbotapi.NewInlineKeyboardButtonData("üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "subject_WEB_DEV"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üé® –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω", "subject_GRAPHIC_DESIGN"),
			tgbotapi.NewInlineKeyboardButtonData("üé¨ VFX-–¥–∏–∑–∞–π–Ω", "subject_VFX_DESIGN"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéØ 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "subject_3D_MODELING"),
			tgbotapi.NewInlineKeyboardButtonData("üíª –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", "subject_COMPUTER_LITERACY"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_main"),
		),
	)
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —É—Ä–æ–∫–æ–º
func createLessonActionsKeyboard(lessonID int, canEnroll bool, canUnenroll bool) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton

	if canEnroll {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", fmt.Sprintf("enroll_%d", lessonID)),
		))
	}

	if canUnenroll {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", fmt.Sprintf("unenroll_%d", lessonID)),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", fmt.Sprintf("lesson_info_%d", lessonID)),
		tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å", fmt.Sprintf("remind_%d", lessonID)),
	))

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", "back_to_schedule"),
	))

	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: buttons}
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
func createConfirmationKeyboard(action string, id int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("confirm_%s_%d", action, id)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action"),
		),
	)
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
func createNavigationKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main_menu"),
		),
	)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
func handleInlineButton(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	// –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	callback := tgbotapi.NewCallback(query.ID, "")
	bot.Request(callback)

	data := query.Data

	switch {
	case strings.HasPrefix(data, "create_lesson:") || strings.HasPrefix(data, "delete_lesson:"):
		handleLessonSubjectCallback(bot, query, db)
	case data == "main_menu":
		handleMainMenu(bot, query.Message, db)
	case data == "create_lesson":
		handleCreateLessonButton(bot, query.Message, db)
	case data == "cancel_lesson":
		handleCancelLessonButton(bot, query.Message, db)
	case data == "schedule":
		handleScheduleButton(bot, query.Message, db)
	case data == "my_lessons":
		handleMyLessonsButton(bot, query.Message, db)
	case data == "help":
		handleHelpButton(bot, query.Message, db)
	case data == "profile":
		handleProfileButton(bot, query.Message, db)
	case data == "teachers":
		handleTeachersButton(bot, query.Message, db)
	case data == "stats":
		handleStatsButton(bot, query.Message, db)
	case data == "notifications":
		handleNotificationsButton(bot, query.Message, db)
	case data == "logs":
		handleLogsButton(bot, query.Message, db)
	case data == "help_teacher":
		handleHelpTeacherButton(bot, query.Message, db)
	case data == "help_admin":
		handleHelpAdminButton(bot, query.Message, db)
	case data == "back_to_main":
		handleMainMenu(bot, query.Message, db)
	case data == "back_to_schedule":
		handleScheduleButton(bot, query.Message, db)
	case data == "back":
		handleBackButton(bot, query.Message, db)
	case data == "cancel_action":
		handleCancelAction(bot, query.Message, db)
	// –ù–æ–≤—ã–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
	case data == "student_dashboard":
		showStudentMainMenu(bot, query.Message, db)
	case data == "enroll_subjects":
		showSubjectsForEnrollment(bot, query.Message.Chat.ID, db)
	case data == "my_lessons_menu":
		handleMyLessonsCommand(bot, query.Message, db)
	case data == "school_schedule":
		handleScheduleCommand(bot, query.Message, db)
	case data == "my_waitlist":
		handleWaitlistCommand(bot, query.Message, db)
	case data == "help_student":
		sendMessage(bot, query.Message.Chat.ID, 
			"üìö **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:**\n\n"+
			"üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /start\n"+
			"üìö –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏\n"+
			"üìÖ –ú–æ–∏ —É—Ä–æ–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n"+
			"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –≤—Å–µ —É—Ä–æ–∫–∏ —à–∫–æ–ª—ã\n"+
			"‚è≥ –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è: –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Ä–æ–∫–∏\n\n"+
			"‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
		if strings.HasPrefix(data, "enroll_subject:") {
			parts := strings.Split(data, ":")
			if len(parts) == 2 {
				subjectID, err := strconv.Atoi(parts[1])
				if err == nil {
					showAvailableLessonsForSubject(bot, query, db, subjectID)
					return
				}
			}
		}
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
		handleDynamicButton(bot, query, db)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func handleMainMenu(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	var keyboard tgbotapi.InlineKeyboardMarkup
	var welcomeText string

	switch role {
	case "student":
		keyboard = createStudentMainMenu()
		welcomeText = "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
	case "teacher":
		keyboard = createTeacherMainMenu()
		welcomeText = "üë®‚Äçüè´ **–ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	case "superuser":
		keyboard = createAdminMainMenu()
		welcomeText = "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
	default:
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func handleScheduleButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	text := "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createSubjectsKeyboard()
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —É—Ä–æ–∫–∏"
func handleMyLessonsButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
	handleMyLessonsCommand(bot, message, db)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
func handleHelpButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
	handleHelp(bot, message, db)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
func handleProfileButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	var fullName, role, phone string
	var isActive bool
	err := db.QueryRow("SELECT full_name, role, phone, is_active FROM users WHERE tg_id = $1", userID).Scan(&fullName, &role, &phone, &isActive)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")
		return
	}

	status := "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
	if !isActive {
		status = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
	}

	profileText := fmt.Sprintf("üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"+
		"üìù **–ò–º—è:** %s\n"+
		"üé≠ **–†–æ–ª—å:** %s\n"+
		"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** %s\n"+
		"üîê **–°—Ç–∞—Ç—É—Å:** %s\n\n"+
		"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", fullName, role, phone, status)

	msg := tgbotapi.NewMessage(message.Chat.ID, profileText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createNavigationKeyboard()
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
func handleTeachersButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
	handleListTeachersCommand(bot, message, db)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
func handleStatsButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
	handleStatsCommand(bot, message, db)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
func handleNotificationsButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	text := "üì¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏**\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n" +
		"‚Ä¢ `/notify_students <lesson_id> <—Ç–µ–∫—Å—Ç>` - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞\n" +
		"‚Ä¢ `/notify_all <—Ç–µ–∫—Å—Ç>` - –º–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
		"‚Ä¢ `/remind_all [—á–∞—Å—ã]` - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —É—Ä–æ–∫–∞—Ö\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createNavigationKeyboard()
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
func handleLogsButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
	handleLogRecentErrorsCommand(bot, message, db)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleHelpTeacherButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
	handleHelpTeacherCommand(bot, message, db)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func handleHelpAdminButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	helpText := "üëë **–°–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n" +
		"**üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n" +
		"**üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:**\n" +
		"‚Ä¢ `/add_teacher` - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n" +
		"‚Ä¢ `/delete_teacher` - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n" +
		"‚Ä¢ `/restore_teacher` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n" +
		"‚Ä¢ `/list_teachers` - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n\n" +
		"**üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏:**\n" +
		"‚Ä¢ `/create_lesson` - —Å–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞\n" +
		"‚Ä¢ `/delete_lesson` - —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞\n" +
		"‚Ä¢ `/restore_lesson` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞\n" +
		"‚Ä¢ `/reschedule_lesson` - –ø–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞\n\n" +
		"**üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n" +
		"‚Ä¢ `/notify_students` - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n" +
		"‚Ä¢ `/notify_all` - –º–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
		"‚Ä¢ `/remind_all` - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n" +
		"**üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏:**\n" +
		"‚Ä¢ `/deactivate_student` - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n" +
		"‚Ä¢ `/activate_student` - –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n" +
		"**üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n" +
		"‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n" +
		"‚Ä¢ `/log_recent_errors` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"

	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createNavigationKeyboard()
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
func handleBackButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	handleMainMenu(bot, message, db)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
func handleCancelAction(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	text := "‚ùå **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
	
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createNavigationKeyboard()
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ (–∑–∞–ø–∏—Å—å, –æ—Ç–ø–∏—Å–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ)
func handleDynamicButton(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	data := query.Data
	message := query.Message

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫
	if len(data) > 7 && data[:7] == "enroll_" {
		lessonIDStr := data[7:]
		lessonID, err := strconv.Atoi(lessonIDStr)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
			return
		}
		
		// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
		tempMessage := *message
		tempMessage.Text = fmt.Sprintf("/enroll %d", lessonID)
		handleEnrollCommand(bot, &tempMessage, db)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É—Ä–æ–∫–∞
	if len(data) > 9 && data[:9] == "unenroll_" {
		lessonIDStr := data[9:]
		lessonID, err := strconv.Atoi(lessonIDStr)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
			return
		}
		
		// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
		tempMessage := *message
		tempMessage.Text = fmt.Sprintf("/unenroll %d", lessonID)
		// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handleUnenrollCommand
		sendMessage(bot, message.Chat.ID, "üîÑ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É—Ä–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ
	if len(data) > 12 && data[:12] == "lesson_info_" {
		lessonIDStr := data[12:]
		lessonID, err := strconv.Atoi(lessonIDStr)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
			return
		}
		
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
		var subjectName, teacherName, startTime string
		var maxStudents, enrolledCount int
		err = db.QueryRow(`
			SELECT s.name, u.full_name, l.start_time::text, l.max_students,
			       COALESCE(COUNT(e.id), 0) as enrolled_count
			FROM lessons l
			JOIN subjects s ON l.subject_id = s.id
			LEFT JOIN teachers t ON l.teacher_id = t.id
			LEFT JOIN users u ON t.user_id = u.id
			LEFT JOIN enrollments e ON l.id = e.lesson_id AND e.status = 'enrolled'
			WHERE l.id = $1 AND l.soft_deleted = false
			GROUP BY s.name, u.full_name, l.start_time, l.max_students`, lessonID).Scan(&subjectName, &teacherName, &startTime, &maxStudents, &enrolledCount)
		
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			return
		}

		infoText := fmt.Sprintf("üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ**\n\n"+
			"üìö **–ü—Ä–µ–¥–º–µ—Ç:** %s\n"+
			"üë®‚Äçüè´ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:** %s\n"+
			"‚è∞ **–í—Ä–µ–º—è:** %s\n"+
			"üë• **–ó–∞–ø–∏—Å–∞–Ω–æ:** %d/%d\n"+
			"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 90 –º–∏–Ω—É—Ç", 
			subjectName, teacherName, startTime[:16], enrolledCount, maxStudents)

		msg := tgbotapi.NewMessage(message.Chat.ID, infoText)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = createNavigationKeyboard()
		bot.Send(msg)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	if len(data) > 8 && data[:8] == "subject_" {
		subjectCode := data[8:]
		handleSubjectSelection(bot, message, db, subjectCode)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
	if len(data) > 8 && data[:8] == "confirm_" {
		actionData := data[8:]
		handleConfirmation(bot, message, db, actionData)
		return
	}

	sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
func handleSubjectSelection(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB, subjectCode string) {
	// –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
	rows, err := db.Query(`
		SELECT l.id, l.start_time::text, u.full_name, l.max_students,
		       COALESCE(COUNT(e.id), 0) as enrolled_count
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		LEFT JOIN enrollments e ON l.id = e.lesson_id AND e.status = 'enrolled'
		WHERE s.code = $1 AND l.soft_deleted = false AND l.start_time > NOW()
		GROUP BY l.id, l.start_time, u.full_name, l.max_students
		ORDER BY l.start_time`, subjectCode)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
		return
	}
	defer rows.Close()

	var lessons []struct {
		id            int
		startTime     string
		teacherName   string
		maxStudents   int
		enrolledCount int
	}

	for rows.Next() {
		var lesson struct {
			id            int
			startTime     string
			teacherName   string
			maxStudents   int
			enrolledCount int
		}
		if err := rows.Scan(&lesson.id, &lesson.startTime, &lesson.teacherName, &lesson.maxStudents, &lesson.enrolledCount); err != nil {
			continue
		}
		lessons = append(lessons, lesson)
	}

	if len(lessons) == 0 {
		text := "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ**\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = createNavigationKeyboard()
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
	var text string
	switch subjectCode {
	case "GAMEDEV":
		text = "üéÆ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–π–º–¥–µ–≤**\n\n"
	case "WEB_DEV":
		text = "üåê **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞**\n\n"
	case "GRAPHIC_DESIGN":
		text = "üé® **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω**\n\n"
	case "VFX_DESIGN":
		text = "üé¨ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: VFX-–¥–∏–∑–∞–π–Ω**\n\n"
	case "3D_MODELING":
		text = "üéØ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**\n\n"
	case "COMPUTER_LITERACY":
		text = "üíª **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å**\n\n"
	default:
		text = "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ**\n\n"
	}

	for _, lesson := range lessons {
		available := lesson.maxStudents - lesson.enrolledCount
		status := "‚úÖ"
		if available <= 0 {
			status = "‚è≥"
		}
		
		text += fmt.Sprintf("%s **–£—Ä–æ–∫ %d**\n", status, lesson.id)
		text += fmt.Sprintf("‚è∞ %s\n", lesson.startTime[:16])
		text += fmt.Sprintf("üë®‚Äçüè´ %s\n", lesson.teacherName)
		text += fmt.Sprintf("üë• %d/%d –º–µ—Å—Ç\n\n", lesson.enrolledCount, lesson.maxStudents)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createNavigationKeyboard()
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫"
func handleCreateLessonButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞
	showSubjectButtons(bot, message, db, "create")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫"
func handleCancelLessonButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
	showSubjectButtons(bot, message, db, "delete")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π
func handleConfirmation(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB, actionData string) {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	sendMessage(bot, message.Chat.ID, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
}
