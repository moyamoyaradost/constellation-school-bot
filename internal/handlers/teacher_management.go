package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleAddTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 4 {
		helpText := "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/add_teacher <Telegram ID> <–ò–º—è> <–§–∞–º–∏–ª–∏—è>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/add_teacher 999999999 –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞`\n\n" +
			"**–ö–∞–∫ —É–∑–Ω–∞—Ç—å Telegram ID:**\n" +
			"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	tgID := args[1]
	firstName := args[2]
	lastName := strings.Join(args[3:], " ")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
	_, err = strconv.ParseInt(tgID, 10, 64)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º tg_id
	var existingUser string
	err = db.QueryRow("SELECT tg_id FROM users WHERE tg_id = $1", tgID).Scan(&existingUser)
	if err == nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		return
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	defer tx.Rollback()
	
	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var userIDResult int
	err = tx.QueryRow(`
		INSERT INTO users (tg_id, full_name, role, is_active, created_at)
		VALUES ($1, $2, $3, $4, NOW())
		RETURNING id`,
		tgID, firstName+" "+lastName, "teacher", true).Scan(&userIDResult)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec(`
		INSERT INTO teachers (user_id, created_at)
		VALUES ($1, NOW())`,
		userIDResult)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	
	successText := "‚úÖ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω**\n\n" +
		"üë§ **–ò–º—è:** " + firstName + " " + lastName + "\n" +
		"üÜî **Telegram ID:** " + tgID + "\n" +
		"üìÖ **–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:** " + time.Now().Format("02.01.2006 15:04") + "\n\n" +
		"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /create_lesson"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, successText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleDeleteTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/delete_teacher <teacher_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/delete_teacher 5`\n\n" +
			"**–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–∏—Ç –í–°–ï —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!\n\n" +
			"**–°–º. —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:** `/list_teachers`"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	teacherIDStr := args[1]
	teacherID, err := strconv.Atoi(teacherIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
	var teacherName string
	err = db.QueryRow(`
		SELECT u.full_name 
		FROM teachers t 
		JOIN users u ON t.user_id = u.id 
		WHERE t.id = $1 AND t.soft_deleted = false`, teacherID).Scan(&teacherName)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	rows, err := db.Query(`
		SELECT id FROM lessons 
		WHERE teacher_id = $1 AND soft_deleted = false`, teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤")
		return
	}
	defer rows.Close()
	
	var lessonIDs []int
	for rows.Next() {
		var lessonID int
		if err := rows.Scan(&lessonID); err != nil {
			continue
		}
		lessonIDs = append(lessonIDs, lessonID)
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	defer tx.Rollback()
	
	// Soft delete –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	if len(lessonIDs) > 0 {
		_, err = tx.Exec(`
			UPDATE lessons 
			SET soft_deleted = true, updated_at = NOW() 
			WHERE teacher_id = $1 AND soft_deleted = false`, teacherID)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–æ–≤")
			return
		}
		
		// –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
		_, err = tx.Exec(`
			UPDATE enrollments 
			SET status = 'cancelled', updated_at = NOW() 
			WHERE lesson_id = ANY($1)`, lessonIDs)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π")
			return
		}
		
		// –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
		_, err = tx.Exec(`
			DELETE FROM waitlist 
			WHERE lesson_id = ANY($1)`, lessonIDs)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏—Å—Ç–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è")
			return
		}
	}
	
	// Soft delete –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec(`
		UPDATE teachers 
		SET soft_deleted = true, updated_at = NOW() 
		WHERE id = $1`, teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec(`
		UPDATE users 
		SET is_active = false, updated_at = NOW() 
		WHERE id = (SELECT user_id FROM teachers WHERE id = $1)`, teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	
	// –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	LogSystemAction(db, "teacher_deleted", fmt.Sprintf("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å %s (ID: %d) —É–¥–∞–ª–µ–Ω, –æ—Ç–º–µ–Ω–µ–Ω–æ —É—Ä–æ–∫–æ–≤: %d", teacherName, teacherID, len(lessonIDs)))
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go notifyStudentsAboutTeacherDeletion(bot, db, lessonIDs, teacherName)
	
	// –û—Ç—á–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
	resultText := "‚úÖ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω**\n\n" +
		"üë§ **–ò–º—è:** " + teacherName + "\n" +
		"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n" +
		"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ —É—Ä–æ–∫–æ–≤: " + strconv.Itoa(len(lessonIDs)) + "\n" +
		"‚Ä¢ –û—á–∏—â–µ–Ω—ã –ª–∏—Å—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è\n" +
		"‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç\n\n" +
		"üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** –°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–æ–≤"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
func handleListTeachersCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
	rows, err := db.Query(`
		SELECT t.id, u.full_name, u.tg_id, u.is_active,
			COUNT(l.id) as active_lessons
		FROM teachers t
		JOIN users u ON t.user_id = u.id
		LEFT JOIN lessons l ON t.id = l.teacher_id AND l.soft_deleted = false
		WHERE t.soft_deleted = false
		GROUP BY t.id, u.full_name, u.tg_id, u.is_active
		ORDER BY u.full_name`)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	defer rows.Close()
	
	var teachersText strings.Builder
	teachersText.WriteString("üë®‚Äçüè´ **–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π**\n\n")
	
	var teacherCount int
	for rows.Next() {
		var id int
		var fullName, tgID string
		var isActive bool
		var activeLessons int
		
		if err := rows.Scan(&id, &fullName, &tgID, &isActive, &activeLessons); err != nil {
			continue
		}
		
		status := "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
		if !isActive {
			status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
		}
		
		teachersText.WriteString(fmt.Sprintf("**%d.** %s\n", id, fullName))
		teachersText.WriteString(fmt.Sprintf("   üÜî ID: %s\n", tgID))
		teachersText.WriteString(fmt.Sprintf("   üìä –°—Ç–∞—Ç—É—Å: %s\n", status))
		teachersText.WriteString(fmt.Sprintf("   üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: %d\n\n", activeLessons))
		
		teacherCount++
	}
	
	if teacherCount == 0 {
		teachersText.WriteString("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
	} else {
		teachersText.WriteString(fmt.Sprintf("**–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:** %d", teacherCount))
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, teachersText.String())
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleRestoreTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/restore_teacher <teacher_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/restore_teacher 5`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n" +
			"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤\n" +
			"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏\n\n" +
			"**–°–º. —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:** `/list_teachers`"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	teacherIDStr := args[1]
	teacherID, err := strconv.Atoi(teacherIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
	var teacherData struct {
		ID   int
		Name string
	}
	err = db.QueryRow(`
		SELECT t.id, u.full_name 
		FROM teachers t 
		JOIN users u ON t.user_id = u.id 
		WHERE t.id = $1`, teacherID).Scan(&teacherData.ID, &teacherData.Name)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	defer tx.Rollback()
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec(`
		UPDATE teachers 
		SET soft_deleted = false, updated_at = NOW() 
		WHERE id = $1`, teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec(`
		UPDATE users 
		SET is_active = true, updated_at = NOW() 
		WHERE id = (SELECT user_id FROM teachers WHERE id = $1)`, teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec(`
		UPDATE lessons 
		SET soft_deleted = false, updated_at = NOW() 
		WHERE teacher_id = $1 AND soft_deleted = true`, teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	
	// –õ–æ–≥–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	LogSystemAction(db, "teacher_restored", fmt.Sprintf("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å %s (ID: %d) –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", teacherData.Name, teacherID))
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º
	sent, failed := notifyStudentsAboutTeacherRestoration(bot, db, teacherID, teacherData.Name)
	
	// –û—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
	resultText := "‚úÖ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n" +
		"üë§ **–ò–º—è:** " + teacherData.Name + "\n" +
		"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n" +
		"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç\n" +
		"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —É—Ä–æ–∫–∏\n" +
		"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: " + strconv.Itoa(sent) + "\n" +
		"‚Ä¢ –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + strconv.Itoa(failed) + "\n\n" +
		"üéâ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Ä–æ–∫–∏!"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// notifyStudentsAboutTeacherDeletion - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func notifyStudentsAboutTeacherDeletion(bot *tgbotapi.BotAPI, db *sql.DB, lessonIDs []int, teacherName string) {
	if len(lessonIDs) == 0 {
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É
	query := `
		SELECT DISTINCT u.tg_id, u.full_name,
			STRING_AGG(
				s.name || ' (' || l.start_time::date || ' ' || l.start_time::time || ')',
				E'\n‚Ä¢ '
			) as lessons_info
		FROM enrollments e
		JOIN students st ON e.student_id = st.id
		JOIN users u ON st.user_id = u.id
		JOIN lessons l ON e.lesson_id = l.id
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.id = ANY($1) AND e.status = 'enrolled'
		GROUP BY u.tg_id, u.full_name`
	
	rows, err := db.Query(query, lessonIDs)
	if err != nil {
		return
	}
	defer rows.Close()
	
	sent := 0
	failed := 0
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName, lessonsInfo string
		
		if err := rows.Scan(&studentTelegramID, &studentName, &lessonsInfo); err != nil {
			failed++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "‚ùå **–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–æ–≤**\n\n" +
			"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å **" + teacherName + "** –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à–∫–æ–ª–µ.\n\n" +
			"üìö **–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:**\n" +
			"‚Ä¢ " + lessonsInfo + "\n\n" +
			"üíî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n" +
			"üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ —É—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /schedule"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º (3 –ø–æ–ø—ã—Ç–∫–∏)
		success := false
		for attempt := 0; attempt < 3; attempt++ {
			if _, err := bot.Send(msg); err == nil {
				success = true
				break
			}
			time.Sleep(500 * time.Millisecond)
		}
		
		if success {
			sent++
		} else {
			failed++
		}
	}
}

// notifyStudentsAboutTeacherRestoration - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func notifyStudentsAboutTeacherRestoration(bot *tgbotapi.BotAPI, db *sql.DB, teacherID int, teacherName string) (int, int) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
	query := `
		SELECT DISTINCT u.tg_id, u.full_name,
			STRING_AGG(
				s.name || ' (' || l.start_time::date || ' ' || l.start_time::time || ')',
				E'\n‚Ä¢ '
			) as lessons_info
		FROM enrollments e
		JOIN students st ON e.student_id = st.id
		JOIN users u ON st.user_id = u.id
		JOIN lessons l ON e.lesson_id = l.id
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.teacher_id = $1 AND l.is_active = true AND l.start_time > NOW()
			AND e.status = 'enrolled'
		GROUP BY u.tg_id, u.full_name`
	
	rows, err := db.Query(query, teacherID)
	if err != nil {
		return 0, 0
	}
	defer rows.Close()
	
	sent := 0
	failed := 0
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName, lessonsInfo string
		
		if err := rows.Scan(&studentTelegramID, &studentName, &lessonsInfo); err != nil {
			failed++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "üéâ **–û–¢–õ–ò–ß–ù–´–ï –ù–û–í–û–°–¢–ò!**\n\n" +
			"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å **" + teacherName + "** –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É!\n\n" +
			"üìö **–í–∞—à–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:**\n" +
			"‚Ä¢ " + lessonsInfo + "\n\n" +
			"‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏\n" +
			"üéØ –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º
		success := false
		for attempt := 0; attempt < 3; attempt++ {
			if _, err := bot.Send(msg); err == nil {
				success = true
				break
			}
			time.Sleep(500 * time.Millisecond)
		}
		
		if success {
			sent++
		} else {
			failed++
		}
	}
	
	return sent, failed
}
