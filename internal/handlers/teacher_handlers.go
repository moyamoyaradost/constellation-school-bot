package handlers

import (
	"database/sql"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
func handleTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	switch message.Command() {
	case "create_lesson":
		handleCreateLessonCommand(bot, message, db)
	case "reschedule_lesson":
		handleRescheduleLessonCommand(bot, message, db)
	case "cancel_lesson":
		handleCancelLessonCommand(bot, message, db)
	default:
		sendMessage(bot, message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
func handleCreateLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 4 {
		helpText := "üìù **–°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/create_lesson <–ø—Ä–µ–¥–º–µ—Ç> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/create_lesson 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ 15.08.2025 14:30`\n\n" +
			"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**\n" +
			"‚Ä¢ 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
			"‚Ä¢ –ì–µ–π–º–¥–µ–≤\n" +
			"‚Ä¢ VFX-–¥–∏–∑–∞–π–Ω\n" +
			"‚Ä¢ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω\n" +
			"‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n" +
			"‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	subjectName := args[1]
	dateStr := args[2]
	timeStr := args[3]
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
	datetimeStr := dateStr + " " + timeStr
	startTime, err := time.Parse("02.01.2006 15:04", datetimeStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY HH:MM")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
	if startTime.Before(time.Now()) {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞
	var subjectID int
	err = db.QueryRow("SELECT id FROM subjects WHERE name = $1", subjectName).Scan(&subjectID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subjects –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º teacher_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var teacherID int
	err = db.QueryRow(`
		SELECT t.id FROM teachers t 
		JOIN users u ON t.user_id = u.id 
		WHERE u.tg_id = $1`, strconv.FormatInt(userID, 10)).Scan(&teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
	_, err = db.Exec(`
		INSERT INTO lessons (subject_id, teacher_id, start_time, max_students, status, created_at)
		VALUES ($1, $2, $3, 10, 'active', NOW())`,
		subjectID, teacherID, startTime)
		
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞")
		return
	}
	
	successText := "‚úÖ **–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n" +
		"üìö –ü—Ä–µ–¥–º–µ—Ç: " + subjectName + "\n" +
		"üìÖ –î–∞—Ç–∞: " + startTime.Format("02.01.2006 15:04") + "\n" +
		"üë• –ú–∞–∫—Å–∏–º—É–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 10\n\n" +
		"–£—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!"
		
	msg := tgbotapi.NewMessage(message.Chat.ID, successText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞
func handleRescheduleLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
	helpText := "üìù **–ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞**\n\n" +
		"**–§–æ—Ä–º–∞—Ç:** `/reschedule_lesson <ID —É—Ä–æ–∫–∞> <–Ω–æ–≤–∞—è –¥–∞—Ç–∞> <–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è>`\n\n" +
		"**–ü—Ä–∏–º–µ—Ä:** `/reschedule_lesson 123 16.08.2025 15:00`\n\n" +
		"‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
		
	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞  
func handleCancelLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
	helpText := "üìù **–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞**\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n\n" +
		"‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
		
	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}
