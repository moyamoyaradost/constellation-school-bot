package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
func handleTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	switch message.Command() {
	case "create_lesson":
		handleCreateLessonCommand(bot, message, db)
	case "reschedule_lesson":
		handleRescheduleLessonCommand(bot, message, db)
	case "cancel_lesson":
		handleCancelLessonCommand(bot, message, db)
	case "my_schedule":
		handleMyScheduleCommand(bot, message, db)
	case "my_students":
		handleTeacherStudentsCommand(bot, message, db)
	default:
		sendMessage(bot, message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
func handleCreateLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
	args := message.CommandArguments()
	if args == "" {
		showSubjectButtons(bot, message, db, "create")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã  
	argsList := strings.Fields(args)
	if len(argsList) < 3 {
		helpText := "üìù **–°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/create_lesson <–ø—Ä–µ–¥–º–µ—Ç> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/create_lesson \"3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\" 16.08.2025 16:30`\n" +
			"‚Ä¢ `/create_lesson –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 20.08.2025 10:00`\n\n" +
			"üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/create_lesson` –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏!"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	subjectName := argsList[0]
	dateStr := argsList[1]
	timeStr := argsList[2]
	
	// –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö, —Å–æ–±–µ—Ä–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
	if strings.HasPrefix(args, "\"") {
		// –ù–∞–π–¥–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
		endQuote := strings.Index(args[1:], "\"")
		if endQuote != -1 {
			subjectName = args[1 : endQuote+1]
			// –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã
			remaining := strings.TrimSpace(args[endQuote+2:])
			remainingArgs := strings.Fields(remaining)
			if len(remainingArgs) >= 2 {
				dateStr = remainingArgs[0]
				timeStr = remainingArgs[1]
			}
		}
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
	datetimeStr := dateStr + " " + timeStr
	var startTime time.Time
	var parseErr error
	
	// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
	formats := []string{
		"02.01.2006 15:04",
		"2.01.2006 15:04", 
		"02.1.2006 15:04",
		"2.1.2006 15:04",
		"02.01.2006 15:4",
		"2.01.2006 15:4",
	}
	
	for _, format := range formats {
		startTime, parseErr = time.Parse(format, datetimeStr)
		if parseErr == nil {
			break
		}
	}
	
	if parseErr != nil {
		sendMessage(bot, message.Chat.ID, fmt.Sprintf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏: '%s'\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY HH:MM –∏–ª–∏ D.M.YYYY H:MM", datetimeStr))
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
	if startTime.Before(time.Now()) {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞
	var subjectID int
	err = db.QueryRow("SELECT id FROM subjects WHERE name = $1", subjectName).Scan(&subjectID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subjects –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º teacher_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var teacherID int
	err = db.QueryRow(`
		SELECT t.id FROM teachers t 
		JOIN users u ON t.user_id = u.id 
		WHERE u.tg_id = $1`, strconv.FormatInt(userID, 10)).Scan(&teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
	_, err = db.Exec(`
		INSERT INTO lessons (subject_id, teacher_id, start_time, max_students, status, created_at)
		VALUES ($1, $2, $3, 10, 'active', NOW())`,
		subjectID, teacherID, startTime)
		
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞")
		return
	}
	
	successText := "‚úÖ **–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n" +
		"üìö –ü—Ä–µ–¥–º–µ—Ç: " + subjectName + "\n" +
		"üìÖ –î–∞—Ç–∞: " + startTime.Format("02.01.2006 15:04") + "\n" +
		"üë• –ú–∞–∫—Å–∏–º—É–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 10\n\n" +
		"–£—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!"
		
	msg := tgbotapi.NewMessage(message.Chat.ID, successText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞
func handleRescheduleLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
	helpText := "üìù **–ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞**\n\n" +
		"**–§–æ—Ä–º–∞—Ç:** `/reschedule_lesson <ID —É—Ä–æ–∫–∞> <–Ω–æ–≤–∞—è –¥–∞—Ç–∞> <–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è>`\n\n" +
		"**–ü—Ä–∏–º–µ—Ä:** `/reschedule_lesson 123 16.08.2025 15:00`\n\n" +
		"‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
		
	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –û—Ç–º–µ–Ω–∞/—É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞  
func handleCancelLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	args := message.CommandArguments()
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
	if args == "" {
		showSubjectButtons(bot, message, db, "delete")
		return
	}
	
	// –ï—Å–ª–∏ –µ—Å—Ç—å ID —É—Ä–æ–∫–∞ - —É–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–∫
	lessonID, err := strconv.Atoi(args)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel_lesson [ID]")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º teacher_id –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
	var teacherID int
	if role == "teacher" {
		err = db.QueryRow(`
			SELECT t.id FROM teachers t 
			JOIN users u ON t.user_id = u.id 
			WHERE u.tg_id = $1`, strconv.FormatInt(userID, 10)).Scan(&teacherID)
		
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
			return
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Ä–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
		var lessonExists bool
		err = db.QueryRow(`
			SELECT EXISTS(SELECT 1 FROM lessons WHERE id = $1 AND teacher_id = $2 AND soft_deleted = false)`,
			lessonID, teacherID).Scan(&lessonExists)
		
		if err != nil || !lessonExists {
			sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
			return
		}
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
	var subjectName string
	var startTime time.Time
	var enrolledCount int
	err = db.QueryRow(`
		SELECT s.name, l.start_time,
		       (SELECT COUNT(*) FROM enrollments e WHERE e.lesson_id = l.id AND e.status = 'confirmed') as enrolled_count
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &startTime, &enrolledCount)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	
	// –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
	_, err = db.Exec(`
		UPDATE lessons SET soft_deleted = true, updated_at = NOW() 
		WHERE id = $1`, lessonID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞: %v", err)
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞")
		return
	}
	
	// –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫
	_, err = db.Exec(`
		UPDATE enrollments SET status = 'cancelled', updated_at = NOW()
		WHERE lesson_id = $1 AND status = 'confirmed'`, lessonID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π: %v", err)
	}
	
	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è)
	if enrolledCount > 0 {
		rows, err := db.Query(`
			SELECT u.tg_id FROM enrollments e
			JOIN users u ON e.user_id = u.id
			WHERE e.lesson_id = $1 AND e.status = 'cancelled'`, lessonID)
		
		if err == nil {
			defer rows.Close()
			notificationText := fmt.Sprintf(
				"‚ùå **–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"+
				"üìö –ü—Ä–µ–¥–º–µ—Ç: %s\n"+
				"üìÖ –í—Ä–µ–º—è: %s\n\n"+
				"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",
				subjectName, startTime.Format("02.01.2006 15:04"))
			
			for rows.Next() {
				var studentTgID string
				if rows.Scan(&studentTgID) == nil {
					studentID, _ := strconv.ParseInt(studentTgID, 10, 64)
					msg := tgbotapi.NewMessage(studentID, notificationText)
					msg.ParseMode = "Markdown"
					bot.Send(msg)
				}
			}
		}
	}
	
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
	confirmText := fmt.Sprintf(
		"‚úÖ **–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n"+
		"üìö –ü—Ä–µ–¥–º–µ—Ç: %s\n"+
		"üìÖ –í—Ä–µ–º—è: %s\n"+
		"üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: %d",
		subjectName, startTime.Format("02.01.2006 15:04"), enrolledCount)
		
	msg := tgbotapi.NewMessage(message.Chat.ID, confirmText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –º–æ–∏ —É—Ä–æ–∫–∏
func handleMyScheduleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü–æ–ª—É—á–∞–µ–º teacher_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var teacherID int
	err := db.QueryRow(`
		SELECT t.id FROM teachers t 
		JOIN users u ON t.user_id = u.id 
		WHERE u.tg_id = $1`, strconv.FormatInt(userID, 10)).Scan(&teacherID)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é
	rows, err := db.Query(`
		SELECT l.id, l.start_time, s.name, l.max_students,
		       (SELECT COUNT(*) FROM enrollments e WHERE e.lesson_id = l.id AND e.status = 'confirmed') as enrolled_count,
		       l.status
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.teacher_id = $1 
		  AND l.start_time >= NOW() 
		  AND l.start_time <= NOW() + INTERVAL '7 days'
		  AND l.soft_deleted = false
		ORDER BY l.start_time`, teacherID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %v", err)
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
		return
	}
	defer rows.Close()
	
	responseText := "üìÖ **–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é**\n\n"
	hasLessons := false
	
	for rows.Next() {
		hasLessons = true
		var lessonID int
		var startTime time.Time
		var subjectName, status string
		var maxStudents, enrolledCount int
		
		if err := rows.Scan(&lessonID, &startTime, &subjectName, &maxStudents, &enrolledCount, &status); err != nil {
			continue
		}
		
		statusIcon := "‚úÖ"
		if status == "cancelled" {
			statusIcon = "‚ùå"
		} else if status == "rescheduled" {
			statusIcon = "üîÑ"
		}
		
		responseText += fmt.Sprintf(
			"%s **%s**\nüìÖ %s\nüë• –ó–∞–ø–∏—Å–∞–Ω–æ: %d/%d\nüÜî ID: %d\n\n",
			statusIcon, subjectName, 
			startTime.Format("02.01.2006 15:04"), 
			enrolledCount, maxStudents, lessonID)
	}
	
	if !hasLessons {
		responseText += "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é"
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –°—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ —É—Ä–æ–∫–∞–º
func handleTeacherStudentsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	args := message.CommandArguments()
	
	// –ü–æ–ª—É—á–∞–µ–º teacher_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var teacherID int
	err := db.QueryRow(`
		SELECT t.id FROM teachers t 
		JOIN users u ON t.user_id = u.id 
		WHERE u.tg_id = $1`, strconv.FormatInt(userID, 10)).Scan(&teacherID)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
		return
	}
	
	if args == "" {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
		handleShowTeacherLessonsForStudents(bot, message, db, teacherID)
		return
	}
	
	// –ü–∞—Ä—Å–∏–º lesson_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	lessonID, err := strconv.Atoi(args)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /my_students [lesson_id]")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Ä–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
	var lessonExists bool
	err = db.QueryRow(`
		SELECT EXISTS(SELECT 1 FROM lessons WHERE id = $1 AND teacher_id = $2 AND soft_deleted = false)`,
		lessonID, teacherID).Scan(&lessonExists)
	
	if err != nil || !lessonExists {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
	var subjectName string
	var startTime time.Time
	err = db.QueryRow(`
		SELECT s.name, l.start_time
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.id = $1`, lessonID).Scan(&subjectName, &startTime)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	rows, err := db.Query(`
		SELECT u.full_name, u.tg_id, e.status, e.enrolled_at
		FROM enrollments e
		JOIN users u ON e.user_id = u.id
		WHERE e.lesson_id = $1
		ORDER BY e.enrolled_at`, lessonID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞: %v", err)
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}
	defer rows.Close()
	
	responseText := fmt.Sprintf("ÔøΩ **–°—Ç—É–¥–µ–Ω—Ç—ã —É—Ä–æ–∫–∞**\n\nüìö –£—Ä–æ–∫: %s\nüìÖ %s\n\n", 
		subjectName, startTime.Format("02.01.2006 15:04"))
	
	studentCount := 0
	for rows.Next() {
		var fullName, tgID, status string
		var enrolledAt time.Time
		
		if err := rows.Scan(&fullName, &tgID, &status, &enrolledAt); err != nil {
			continue
		}
		
		studentCount++
		statusIcon := "‚úÖ"
		if status == "waitlist" {
			statusIcon = "‚è≥"
		} else if status == "cancelled" {
			statusIcon = "‚ùå"
		}
		
		responseText += fmt.Sprintf("%d. %s %s\nüìû @%s\nüìÖ –ó–∞–ø–∏—Å–∞–ª—Å—è: %s\n\n",
			studentCount, statusIcon, fullName, tgID, enrolledAt.Format("02.01.2006 15:04"))
	}
	
	if studentCount == 0 {
		responseText += "üë§ –ù–∞ —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è"
	} else {
		responseText += fmt.Sprintf("üë• **–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: %d**", studentCount)
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
func handleShowTeacherLessonsForStudents(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB, teacherID int) {
	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	rows, err := db.Query(`
		SELECT l.id, l.start_time, s.name,
		       (SELECT COUNT(*) FROM enrollments e WHERE e.lesson_id = l.id AND e.status IN ('confirmed', 'waitlist')) as student_count
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.teacher_id = $1 
		  AND l.start_time >= NOW() - INTERVAL '1 day'
		  AND l.soft_deleted = false
		ORDER BY l.start_time`, teacherID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %v", err)
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤")
		return
	}
	defer rows.Close()
	
	responseText := "üë• **–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**\n\n"
	responseText += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/my_students [ID —É—Ä–æ–∫–∞]`\n\n"
	
	hasLessons := false
	for rows.Next() {
		hasLessons = true
		var lessonID int
		var startTime time.Time
		var subjectName string
		var studentCount int
		
		if err := rows.Scan(&lessonID, &startTime, &subjectName, &studentCount); err != nil {
			continue
		}
		
		responseText += fmt.Sprintf("üÜî **%d** - %s\nüìÖ %s\nüë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤: %d\n\n",
			lessonID, subjectName, startTime.Format("02.01.2006 15:04"), studentCount)
	}
	
	if !hasLessons {
		responseText += "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
func showSubjectButtons(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB, action string) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã
	rows, err := db.Query("SELECT id, name FROM subjects ORDER BY name")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %v", err)
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
		return
	}
	defer rows.Close()
	
	var keyboard [][]tgbotapi.InlineKeyboardButton
	
	for rows.Next() {
		var subjectID int
		var subjectName string
		if err := rows.Scan(&subjectID, &subjectName); err != nil {
			continue
		}
		
		callbackData := fmt.Sprintf("%s_lesson:%d", action, subjectID)
		button := tgbotapi.NewInlineKeyboardButtonData(subjectName, callbackData)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}
	
	if len(keyboard) == 0 {
		sendMessage(bot, message.Chat.ID, "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return
	}
	
	var headerText string
	if action == "create" {
		headerText = "üìö **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞:**"
	} else {
		headerText = "üìö **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:**"
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, headerText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	bot.Send(msg)
}
