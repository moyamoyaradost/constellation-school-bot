package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ================ –ö–ù–û–ü–û–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø–ú–ò ================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
func handleTeachersMenuButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	userID := message.From.ID
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", strconv.FormatInt(userID, 10)).Scan(&role)
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")
		return
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
	text := "üë®‚Äçüè´ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏**\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", "list_teachers"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "delete_teacher_menu"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "restore_teacher_menu"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		},
	}
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
func showDeleteTeacherButtons(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	rows, err := db.Query(`
		SELECT t.id, u.full_name, 
			(SELECT COUNT(*) FROM lessons WHERE teacher_id = t.id AND soft_deleted = false AND start_time > NOW()) as active_lessons
		FROM teachers t
		JOIN users u ON t.user_id = u.id
		WHERE t.soft_deleted = false
		ORDER BY u.full_name`)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	defer rows.Close()
	
	var buttons [][]tgbotapi.InlineKeyboardButton
	count := 0
	
	for rows.Next() {
		var teacherID int
		var fullName string
		var activeLessons int
		
		if err := rows.Scan(&teacherID, &fullName, &activeLessons); err != nil {
			continue
		}
		
		count++
		buttonText := fmt.Sprintf("üë®‚Äçüè´ %s (üìö%d)", fullName, activeLessons)
		callbackData := fmt.Sprintf("confirm_delete_teacher_%d", teacherID)
		
		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}
	
	if count == 0 {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
		return
	}
	
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "teachers"),
	})
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	text := "üóëÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n" +
		"‚ÑπÔ∏è –¶–∏—Ñ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
func showRestoreTeacherButtons(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	rows, err := db.Query(`
		SELECT t.id, u.full_name, t.updated_at
		FROM teachers t
		JOIN users u ON t.user_id = u.id
		WHERE t.soft_deleted = true
		ORDER BY t.updated_at DESC`)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	defer rows.Close()
	
	var buttons [][]tgbotapi.InlineKeyboardButton
	count := 0
	
	for rows.Next() {
		var teacherID int
		var fullName string
		var updatedAt time.Time
		
		if err := rows.Scan(&teacherID, &fullName, &updatedAt); err != nil {
			continue
		}
		
		count++
		buttonText := fmt.Sprintf("üë®‚Äçüè´ %s (%s)", fullName, updatedAt.Format("02.01"))
		callbackData := fmt.Sprintf("restore_teacher_%d", teacherID)
		
		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}
	
	if count == 0 {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "teachers"),
	})
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	text := "üîÑ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:**"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleConfirmDeleteTeacher(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	parts := strings.Split(query.Data, "_")
	if len(parts) != 4 {
		return
	}
	
	teacherID, err := strconv.Atoi(parts[3])
	if err != nil {
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
	var fullName string
	var activeLessons int
	err = db.QueryRow(`
		SELECT u.full_name,
			(SELECT COUNT(*) FROM lessons WHERE teacher_id = $1 AND soft_deleted = false AND start_time > NOW()) as active_lessons
		FROM teachers t
		JOIN users u ON t.user_id = u.id
		WHERE t.id = $1`, teacherID).Scan(&fullName, &activeLessons)
	
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	
	confirmText := fmt.Sprintf("‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"+
		"üë®‚Äçüè´ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:** %s\n"+
		"üìö **–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:** %d\n\n"+
		"‚ùóÔ∏è –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã!\n"+
		"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", fullName, activeLessons)
	
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("execute_delete_teacher_%d", teacherID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "delete_teacher_menu"),
		},
	}
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	editMsg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, confirmText)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard
	bot.Send(editMsg)
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleExecuteDeleteTeacher(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	parts := strings.Split(query.Data, "_")
	if len(parts) != 4 {
		return
	}
	
	teacherID, err := strconv.Atoi(parts[3])
	if err != nil {
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
	tempMessage := *query.Message
	tempMessage.Text = fmt.Sprintf("/delete_teacher %d", teacherID)
	tempMessage.From = query.From
	
	handleDeleteTeacherCommand(bot, &tempMessage, db)
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleRestoreTeacherAction(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	parts := strings.Split(query.Data, "_")
	if len(parts) != 3 {
		return
	}
	
	teacherID, err := strconv.Atoi(parts[2])
	if err != nil {
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
	tempMessage := *query.Message
	tempMessage.Text = fmt.Sprintf("/restore_teacher %d", teacherID)
	tempMessage.From = query.From
	
	handleRestoreTeacherCommand(bot, &tempMessage, db)
}

// ================ –ö–ù–û–ü–û–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–†–û–ö–ê–ú–ò ================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
func handleAdminLessonsMenuButton(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	text := "üìö **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏ (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)**\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", "admin_delete_lesson"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üìã –í—Å–µ —É—Ä–æ–∫–∏", "schedule"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		},
	}
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}
