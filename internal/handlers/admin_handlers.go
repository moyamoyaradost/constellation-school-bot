package handlers

import (
	"database/sql"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func handleAdminCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || (role != "admin" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
		return
	}
	
	// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	switch message.Command() {
	case "add_teacher":
		handleAddTeacherCommand(bot, message, db)
	case "delete_teacher":
		handleDeleteTeacherCommand(bot, message, db)
	case "notify_students":
		handleNotifyStudentsCommand(bot, message, db)
	case "cancel_with_notification":
		sendMessage(bot, message.Chat.ID, "‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	case "reschedule_with_notify":
		sendMessage(bot, message.Chat.ID, "‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	case "list_teachers":
		handleListTeachersCommand(bot, message, db)
	case "my_students":
		handleMyStudentsCommand(bot, message, db)
	case "restore_lesson":
		handleRestoreLessonCommand(bot, message, db)
	case "restore_teacher":
		handleRestoreTeacherCommand(bot, message, db)
	case "rate_limit_stats":
		handleRateLimitStatsCommand(bot, message, db)
	case "stats":
		handleStatsCommand(bot, message, db)
	case "log_recent_errors":
		handleLogRecentErrorsCommand(bot, message, db)
	case "delete_lesson":
		handleDeleteLessonCommand(bot, message, db)
	case "notify_all":
		handleNotifyAllCommand(bot, message, db)
	case "remind_all":
		handleRemindAllCommand(bot, message, db)
	case "deactivate_student":
		handleDeactivateStudentCommand(bot, message, db)
	case "activate_student":
		handleActivateStudentCommand(bot, message, db)
	default:
		sendMessage(bot, message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞
func handleNotifyStudentsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || (role != "admin" && role != "superuser") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 3 {
		helpText := "üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/notify_students <lesson_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/notify_students 15 –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ`\n" +
			"‚Ä¢ `/notify_students 22 –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã`\n\n" +
			"**–ü–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É—Ä–æ–∫"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º lesson_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	notificationText := strings.Join(args[2:], " ")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
	var subjectName, teacherName string
	var startTime string
	err = db.QueryRow(`
		SELECT s.name, COALESCE(u.full_name, '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'), l.start_time::text
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime)
		
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞
	sentCount, failedCount := notifyStudentsOfLesson(bot, db, lessonID, notificationText, subjectName, teacherName, startTime)
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã**\n\n" +
		"üìö –£—Ä–æ–∫: " + subjectName + " (" + startTime[:16] + ")\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n\n" +
		"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + strconv.Itoa(sentCount) + "\n" +
		"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: " + strconv.Itoa(failedCount) + "\n\n" +
		"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: " + notificationText
	
	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞
func notifyStudentsOfLesson(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, message, subjectName, teacherName, startTime string) (int, int) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–∫
	rows, err := db.Query(`
		SELECT u.tg_id, u.full_name
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1 AND e.status = 'enrolled'`, lessonID)
		
	if err != nil {
		return 0, 0
	}
	defer rows.Close()
	
	var sentCount, failedCount int
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName string
		
		if err := rows.Scan(&studentTelegramID, &studentName); err != nil {
			failedCount++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ä–æ–∫–µ**\n\n" +
			"üìö –ü—Ä–µ–¥–º–µ—Ç: " + subjectName + "\n" +
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
			"üìÖ –í—Ä–µ–º—è: " + startTime[:16] + "\n\n" +
			"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: " + message
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º (3 –ø–æ–ø—ã—Ç–∫–∏)
		sent := false
		for i := 0; i < 3; i++ {
			if _, err := bot.Send(msg); err == nil {
				sent = true
				break
			}
		}
		
		if sent {
			sentCount++
		} else {
			failedCount++
		}
	}
	
	return sentCount, failedCount
}
