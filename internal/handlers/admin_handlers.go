package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"
	"regexp"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func handleAdminCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
		return
	}
	
	// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	switch message.Command() {
	case "add_teacher":
		handleAddTeacherCommand(bot, message, db)
	case "delete_teacher":
		handleDeleteTeacherCommand(bot, message, db)
	case "notify_students":
		handleNotifyStudentsCommand(bot, message, db)
	case "cancel_with_notification":
		handleCancelWithNotificationCommand(bot, message, db)
	case "reschedule_with_notify":
		handleRescheduleWithNotifyCommand(bot, message, db)
	case "list_teachers":
		handleListTeachersCommand(bot, message, db)
	case "my_students":
		handleMyStudentsCommand(bot, message, db)
	case "restore_lesson":
		handleRestoreLessonCommand(bot, message, db)
	case "restore_teacher":
		handleRestoreTeacherCommand(bot, message, db)
	case "rate_limit_stats":
		handleRateLimitStatsCommand(bot, message, db)
	case "stats":
		handleStatsCommand(bot, message, db)
	default:
		sendMessage(bot, message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleAddTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 4 {
		helpText := "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/add_teacher <Telegram ID> <–ò–º—è> <–§–∞–º–∏–ª–∏—è>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/add_teacher 999999999 –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞`\n\n" +
			"**–ö–∞–∫ —É–∑–Ω–∞—Ç—å Telegram ID:**\n" +
			"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	tgID := args[1]
	firstName := args[2]
	lastName := strings.Join(args[3:], " ")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
	_, err = strconv.ParseInt(tgID, 10, 64)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º tg_id
	var existingUser string
	err = db.QueryRow("SELECT tg_id FROM users WHERE tg_id = $1", tgID).Scan(&existingUser)
	if err == nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		return
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	defer tx.Rollback()
	
	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var userID_new int
	err = tx.QueryRow(`
		INSERT INTO users (tg_id, full_name, role, created_at) 
		VALUES ($1, $2, 'teacher', NOW()) 
		RETURNING id`,
		tgID, firstName+" "+lastName).Scan(&userID_new)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ teachers
	_, err = tx.Exec(`
		INSERT INTO teachers (user_id, created_at)
		VALUES ($1, NOW())`,
		userID_new)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	
	successText := "‚úÖ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n" +
		"üë®‚Äçüè´ –ò–º—è: " + firstName + " " + lastName + "\n" +
		"üÜî Telegram ID: " + tgID + "\n\n" +
		"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
		
	msg := tgbotapi.NewMessage(message.Chat.ID, successText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–®–∞–≥ 8.1 ROADMAP)
func handleDeleteTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || role != "admin" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/delete_teacher <teacher_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/delete_teacher 5`\n\n" +
			"**‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:**\n" +
			"‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã\n" +
			"‚Ä¢ –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ\n" +
			"‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n" +
			"‚Ä¢ –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω\n\n" +
			"**–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:** /list_teachers"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	teacherIDStr := args[1]
	teacherID, err := strconv.Atoi(teacherIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
	var teacherName string
	var teacherTelegramID int64
	var userID_teacher int
	err = db.QueryRow(`
		SELECT u.full_name, u.tg_id, u.id
		FROM users u 
		JOIN teachers t ON u.id = t.user_id 
		WHERE t.id = $1 AND u.role = 'teacher' AND u.is_active = true`,
		teacherID).Scan(&teacherName, &teacherTelegramID, &userID_teacher)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}
	defer tx.Rollback()
	
	// 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	rows, err := tx.Query(`
		SELECT l.id, l.start_time, s.name 
		FROM lessons l 
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.teacher_id = $1 AND l.status = 'active' 
			AND l.start_time > NOW() AND l.soft_deleted = false`,
		teacherID)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	var lessonIDs []int
	var lessonInfo []string
	
	for rows.Next() {
		var lessonID int
		var startTime string
		var subjectName string
		
		if err := rows.Scan(&lessonID, &startTime, &subjectName); err != nil {
			continue
		}
		
		lessonIDs = append(lessonIDs, lessonID)
		lessonInfo = append(lessonInfo, fmt.Sprintf("üìÖ %s - %s", startTime[:16], subjectName))
	}
	rows.Close()
	
	if len(lessonIDs) == 0 {
		sendMessage(bot, message.Chat.ID, "‚ÑπÔ∏è –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
	}
	
	// 2. Soft-delete –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	for _, lessonID := range lessonIDs {
		_, err = tx.Exec(`
			UPDATE lessons 
			SET status = 'cancelled', soft_deleted = true, updated_at = NOW()
			WHERE id = $1`, lessonID)
		
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞ ID "+strconv.Itoa(lessonID))
			return
		}
		
		// –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Ä–æ–∫
		_, err = tx.Exec(`
			UPDATE enrollments 
			SET status = 'cancelled'
			WHERE lesson_id = $1 AND status = 'enrolled'`, lessonID)
		
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π –Ω–∞ —É—Ä–æ–∫ ID "+strconv.Itoa(lessonID))
			return
		}
		
		// –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞
		_, err = tx.Exec(`DELETE FROM waitlist WHERE lesson_id = $1`, lessonID)
		if err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞ ID "+strconv.Itoa(lessonID))
			return
		}
	}
	
	// 3. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec(`
		UPDATE users 
		SET is_active = false, updated_at = NOW()
		WHERE id = $1`, userID_teacher)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// 4. –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
		return
	}
	
	// 5. –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	if len(lessonIDs) > 0 {
		go notifyStudentsAboutTeacherDeletion(bot, db, lessonIDs, teacherName)
	}
	
	// 6. –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	teacherNotification := "‚ùå **–í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n" +
		"–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n" +
		"–í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.\n\n" +
		"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
	
	teacherMsg := tgbotapi.NewMessage(teacherTelegramID, teacherNotification)
	teacherMsg.ParseMode = "Markdown"
	bot.Send(teacherMsg)
	
	// 7. –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	reportText := "‚úÖ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
		"üÜî ID: " + teacherIDStr + "\n" +
		"üìö –û—Ç–º–µ–Ω–µ–Ω–æ —É—Ä–æ–∫–æ–≤: " + strconv.Itoa(len(lessonIDs)) + "\n\n"
	
	if len(lessonInfo) > 0 {
		reportText += "**–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:**\n" + strings.Join(lessonInfo, "\n") + "\n\n"
	}
	
	reportText += "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º\n" +
		"üîí –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n" +
		"‚è≥ –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–∏—â–µ–Ω"
		
	msg := tgbotapi.NewMessage(message.Chat.ID, reportText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º (–®–∞–≥ 8.2 ROADMAP)
func handleNotifyStudentsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || role != "admin" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 3 {
		helpText := "üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞** (–®–∞–≥ 8.2)\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/notify_students <lesson_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/notify_students 15 –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ`\n" +
			"‚Ä¢ `/notify_students 22 –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã`\n\n" +
			"**–ü–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É—Ä–æ–∫\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/cancel_with_notification` - –æ—Ç–º–µ–Ω–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º\n" +
			"‚Ä¢ `/reschedule_with_notify` - –ø–µ—Ä–µ–Ω–æ—Å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º lesson_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	notificationText := strings.Join(args[2:], " ")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
	var subjectName, teacherName string
	var startTime string
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time::text
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime)
		
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞ —Å retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º
	sentCount, failedCount := notifyStudentsOfLesson(bot, db, lessonID, notificationText, subjectName, teacherName, startTime)
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã**\n\n" +
		"üìö –£—Ä–æ–∫: " + subjectName + " (" + startTime[:16] + ")\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n\n" +
		"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + strconv.Itoa(sentCount) + "\n" +
		"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: " + strconv.Itoa(failedCount) + "\n\n" +
		"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: " + notificationText
	
	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º (–®–∞–≥ 8.2 ROADMAP)
func handleCancelWithNotificationCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || (role != "admin" && role != "teacher") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	args := strings.Fields(message.Text)
	if len(args) < 3 {
		helpText := "ÔøΩ **–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/cancel_with_notification <lesson_id> <–ø—Ä–∏—á–∏–Ω–∞>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/cancel_with_notification 15 –ë–æ–ª–µ–∑–Ω—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è`\n" +
			"‚Ä¢ `/cancel_with_notification 22 –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã`\n\n" +
			"**–î–µ–π—Å—Ç–≤–∏—è:**\n" +
			"‚Ä¢ –£—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω\n" +
			"‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π\n" +
			"‚Ä¢ –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	reason := strings.Join(args[2:], " ")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–º–µ–Ω—è–µ–º —É—Ä–æ–∫
	if cancelLessonWithNotification(bot, db, lessonID, reason, role, userID) {
		sendMessage(bot, message.Chat.ID, "‚úÖ –£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω, —Å—Ç—É–¥–µ–Ω—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã")
	}
}

// –ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º (–®–∞–≥ 8.2 ROADMAP)
func handleRescheduleWithNotifyCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || (role != "admin" && role != "teacher") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	args := strings.Fields(message.Text)
	if len(args) < 3 {
		helpText := "üîÑ **–ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/reschedule_with_notify <lesson_id> <–Ω–æ–≤–æ–µ_–≤—Ä–µ–º—è>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/reschedule_with_notify 15 2025-08-15 14:00`\n" +
			"‚Ä¢ `/reschedule_with_notify 22 –∑–∞–≤—Ç—Ä–∞ 16:00`\n\n" +
			"**–î–µ–π—Å—Ç–≤–∏—è:**\n" +
			"‚Ä¢ –í—Ä–µ–º—è —É—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ\n" +
			"‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ\n" +
			"‚Ä¢ –ó–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	lessonIDStr := args[1]
	newTimeStr := strings.Join(args[2:], " ")
	
	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ lessonID –≤ int
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞: "+lessonIDStr)
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	newStartTime, err := parseTimeInput(newTimeStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: "+err.Error())
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
	var currentLessonData struct {
		ID          int
		SubjectName string
		TeacherName string
		StartTime   string
		TeacherID   int
	}
	
	query := `
		SELECT l.id, s.name as subject_name, u.full_name as teacher_name, 
			   l.start_time, t.user_id
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		JOIN teachers t ON l.teacher_id = t.id
		JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.is_active = true`
	
	err = db.QueryRow(query, lessonID).Scan(
		&currentLessonData.ID,
		&currentLessonData.SubjectName,
		&currentLessonData.TeacherName,
		&currentLessonData.StartTime,
		&currentLessonData.TeacherID,
	)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —É—Ä–æ–∫–∞")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏)
	if role == "teacher" {
		var currentUserID int
		err = db.QueryRow("SELECT id FROM users WHERE tg_id = $1", userID).Scan(&currentUserID)
		if err != nil || currentUserID != currentLessonData.TeacherID {
			sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏")
			return
		}
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Ä–æ–∫–∞
	_, err = db.Exec("UPDATE lessons SET start_time = $1 WHERE id = $2", newStartTime, lessonID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —É—Ä–æ–∫–∞")
		return
	}
	
	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
	sent, failed := notifyStudentsOfLesson(bot, db, lessonID, 
		"üîÑ **–ü–ï–†–ï–ù–û–° –£–†–û–ö–ê**\n\n"+
		"üìö –ü—Ä–µ–¥–º–µ—Ç: "+currentLessonData.SubjectName+"\n"+
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: "+currentLessonData.TeacherName+"\n\n"+
		"‚è∞ **–°—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è:** "+currentLessonData.StartTime[:16]+"\n"+
		"üïí **–ù–û–í–û–ï –í–†–ï–ú–Ø:** "+newStartTime.Format("2006-01-02 15:04")+"\n\n"+
		"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π",
		currentLessonData.SubjectName, currentLessonData.TeacherName, currentLessonData.StartTime)
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/—É—á–∏—Ç–µ–ª—é
	reportText := fmt.Sprintf(
		"‚úÖ **–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω**\n\n"+
		"üÜî ID —É—Ä–æ–∫–∞: %d\n"+
		"üìö –ü—Ä–µ–¥–º–µ—Ç: %s\n"+
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n\n"+
		"‚è∞ –ë—ã–ª–æ: %s\n"+
		"üïí –°—Ç–∞–ª–æ: %s\n\n"+
		"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: %d\n"+
		"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: %d",
		lessonID, currentLessonData.SubjectName, currentLessonData.TeacherName,
		currentLessonData.StartTime[:16], newStartTime.Format("2006-01-02 15:04"),
		sent, failed)
	
	sendMessage(bot, message.Chat.ID, reportText)
}

// –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–®–∞–≥ 8.1 ROADMAP)
func handleListTeachersCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || role != "admin" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
	rows, err := db.Query(`
		SELECT t.id, u.full_name, u.tg_id, u.is_active,
			COUNT(l.id) as lessons_count
		FROM teachers t
		JOIN users u ON t.user_id = u.id
		LEFT JOIN lessons l ON t.id = l.teacher_id AND l.status = 'active' 
			AND l.start_time > NOW() AND l.soft_deleted = false
		GROUP BY t.id, u.full_name, u.tg_id, u.is_active
		ORDER BY u.is_active DESC, u.full_name`)
		
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	defer rows.Close()
	
	var teachersText strings.Builder
	teachersText.WriteString("üë• **–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π**\n\n")
	
	teacherCount := 0
	for rows.Next() {
		var teacherID int
		var name string
		var telegramID int64
		var isActive bool
		var lessonsCount int
		
		if err := rows.Scan(&teacherID, &name, &telegramID, &isActive, &lessonsCount); err != nil {
			continue
		}
		
		teacherCount++
		statusIcon := "‚úÖ"
		if !isActive {
			statusIcon = "‚ùå"
		}
		
		teachersText.WriteString(fmt.Sprintf("%s **%s**\n", statusIcon, name))
		teachersText.WriteString(fmt.Sprintf("   üÜî ID: %d | TG: %d\n", teacherID, telegramID))
		teachersText.WriteString(fmt.Sprintf("   üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: %d\n\n", lessonsCount))
	}
	
	if teacherCount == 0 {
		teachersText.WriteString("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
	} else {
		teachersText.WriteString(fmt.Sprintf("**–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:** %d", teacherCount))
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, teachersText.String())
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞ —Å retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º
func notifyStudentsOfLesson(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, message, subjectName, teacherName, startTime string) (int, int) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–∫
	rows, err := db.Query(`
		SELECT u.tg_id, u.full_name
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1 AND e.status = 'enrolled'`, lessonID)
		
	if err != nil {
		return 0, 0
	}
	defer rows.Close()
	
	var sentCount, failedCount int
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName string
		
		if err := rows.Scan(&studentTelegramID, &studentName); err != nil {
			failedCount++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ä–æ–∫–µ**\n\n" +
			"üìö –ü—Ä–µ–¥–º–µ—Ç: " + subjectName + "\n" +
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
			"üìÖ –í—Ä–µ–º—è: " + startTime[:16] + "\n\n" +
			"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: " + message
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º (3 –ø–æ–ø—ã—Ç–∫–∏)
		sent := false
		for i := 0; i < 3; i++ {
			if _, err := bot.Send(msg); err == nil {
				sent = true
				break
			}
		}
		
		if sent {
			sentCount++
		} else {
			failedCount++
		}
	}
	
	return sentCount, failedCount
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
func cancelLessonWithNotification(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, reason, userRole string, userID int64) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–∫
	var subjectName, teacherName, startTime string
	var teacherTelegramID int64
	err := db.QueryRow(`
		SELECT s.name, ut.full_name, l.start_time::text, ut.tg_id
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users ut ON t.user_id = ut.id
		WHERE l.id = $1 AND l.status = 'active' AND l.soft_deleted = false`,
		lessonID).Scan(&subjectName, &teacherName, &startTime, &teacherTelegramID)
		
	if err != nil {
		return false
	}
	
	// –î–ª—è —É—á–∏—Ç–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏—Ö —É—Ä–æ–∫
	if userRole == "teacher" {
		var checkTeacherID int64
		err = db.QueryRow(`
			SELECT ut.tg_id
			FROM lessons l
			JOIN teachers t ON l.teacher_id = t.id
			JOIN users ut ON t.user_id = ut.id
			WHERE l.id = $1`, lessonID).Scan(&checkTeacherID)
			
		if err != nil || checkTeacherID != userID {
			return false
		}
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		return false
	}
	defer tx.Rollback()
	
	// –û—Ç–º–µ–Ω—è–µ–º —É—Ä–æ–∫
	_, err = tx.Exec("UPDATE lessons SET status = 'cancelled' WHERE id = $1", lessonID)
	if err != nil {
		return false
	}
	
	// –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏
	_, err = tx.Exec("UPDATE enrollments SET status = 'cancelled' WHERE lesson_id = $1", lessonID)
	if err != nil {
		return false
	}
	
	// –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
	_, err = tx.Exec("DELETE FROM waitlist WHERE lesson_id = $1", lessonID)
	if err != nil {
		return false
	}
	
	if err = tx.Commit(); err != nil {
		return false
	}
	
	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	notifyStudentsAboutCancellationWithReason(bot, db, lessonID, subjectName, teacherName, startTime, reason)
	
	return true
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func notifyStudentsAboutCancellationWithReason(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, subjectName, teacherName, startTime, reason string) {
	rows, err := db.Query(`
		SELECT u.tg_id, u.full_name
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1`, lessonID)
		
	if err != nil {
		return
	}
	defer rows.Close()
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName string
		
		if err := rows.Scan(&studentTelegramID, &studentName); err != nil {
			continue
		}
		
		notificationText := "‚ùå **–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞**\n\n" +
			"üìö –ü—Ä–µ–¥–º–µ—Ç: " + subjectName + "\n" +
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
			"üìÖ –í—Ä–µ–º—è: " + startTime[:16] + "\n\n" +
			"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: " + reason + "\n\n" +
			"üíî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n" +
			"üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ —É—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /schedule"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
	}
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func handleMyStudentsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || role != "admin" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	rows, err := db.Query(`
		SELECT u.full_name, u.phone, u.created_at,
			COUNT(e.id) as enrollments_count
		FROM users u
		LEFT JOIN students s ON u.id = s.user_id
		LEFT JOIN enrollments e ON s.id = e.student_id AND e.status = 'enrolled'
		WHERE u.role = 'student' AND u.is_active = true
		GROUP BY u.id, u.full_name, u.phone, u.created_at
		ORDER BY u.created_at DESC`)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}
	defer rows.Close()
	
	var studentsText strings.Builder
	studentsText.WriteString("üë• **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**\n\n")
	
	studentCount := 0
	for rows.Next() {
		var name, phone string
		var createdAt string
		var enrollmentsCount int
		
		if err := rows.Scan(&name, &phone, &createdAt, &enrollmentsCount); err != nil {
			continue
		}
		
		studentCount++
		studentsText.WriteString(fmt.Sprintf("%d. **%s**", studentCount, name))
		if phone != "" {
			studentsText.WriteString(fmt.Sprintf(" (%s)", phone))
		}
		studentsText.WriteString(fmt.Sprintf("\n   üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: %d\n", enrollmentsCount))
		studentsText.WriteString(fmt.Sprintf("   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s\n\n", createdAt[:10]))
	}
	
	if studentCount == 0 {
		studentsText.WriteString("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
	} else {
		studentsText.WriteString(fmt.Sprintf("**–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:** %d", studentCount))
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, studentsText.String())
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–®–∞–≥ 8.1 ROADMAP)
func notifyStudentsAboutTeacherDeletion(bot *tgbotapi.BotAPI, db *sql.DB, lessonIDs []int, teacherName string) {
	if len(lessonIDs) == 0 {
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID —É—Ä–æ–∫–æ–≤ –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
	lessonIDsStr := make([]string, len(lessonIDs))
	for i, id := range lessonIDs {
		lessonIDsStr[i] = strconv.Itoa(id)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
	query := fmt.Sprintf(`
		SELECT DISTINCT u.tg_id, u.full_name,
			STRING_AGG(TO_CHAR(l.start_time, 'DD.MM.YYYY HH24:MI') || ' - ' || s.name, E'\n') as lessons_info
		FROM enrollments e
		JOIN students st ON e.student_id = st.id
		JOIN users u ON st.user_id = u.id
		JOIN lessons l ON e.lesson_id = l.id
		JOIN subjects s ON l.subject_id = s.id
		WHERE e.lesson_id IN (%s) AND e.status = 'enrolled'
		GROUP BY u.tg_id, u.full_name`, 
		strings.Join(lessonIDsStr, ","))
	
	rows, err := db.Query(query)
	if err != nil {
		return // –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	}
	defer rows.Close()
	
	var sentCount int
	for rows.Next() {
		var studentTelegramID int64
		var studentName, lessonsInfo string
		
		if err := rows.Scan(&studentTelegramID, &studentName, &lessonsInfo); err != nil {
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
		notificationText := "‚ùå **–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–æ–≤**\n\n" +
			"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∏ —É—Ä–æ–∫–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –≤ —Å–≤—è–∑–∏ —Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è **" + teacherName + "**.\n\n" +
			"**–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:**\n" + lessonsInfo + "\n\n" +
			"üíî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n" +
			"üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n" +
			"üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π /schedule"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		if _, err := bot.Send(msg); err == nil {
			sentCount++
		}
	}
}

// parseTimeInput - –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
func parseTimeInput(input string) (time.Time, error) {
	now := time.Now()
	input = strings.ToLower(strings.TrimSpace(input))
	
	// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
	patterns := []struct {
		regex string
		parse func([]string) (time.Time, error)
	}{
		// –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 2025-08-15 14:00
		{
			regex: `^(\d{4})-(\d{1,2})-(\d{1,2})\s+(\d{1,2}):(\d{2})$`,
			parse: func(matches []string) (time.Time, error) {
				year, _ := strconv.Atoi(matches[1])
				month, _ := strconv.Atoi(matches[2])
				day, _ := strconv.Atoi(matches[3])
				hour, _ := strconv.Atoi(matches[4])
				minute, _ := strconv.Atoi(matches[5])
				return time.Date(year, time.Month(month), day, hour, minute, 0, 0, now.Location()), nil
			},
		},
		// –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –∑–∞–≤—Ç—Ä–∞ 16:00, —Å–µ–≥–æ–¥–Ω—è 14:30
		{
			regex: `^(–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\s+(\d{1,2}):(\d{2})$`,
			parse: func(matches []string) (time.Time, error) {
				hour, _ := strconv.Atoi(matches[2])
				minute, _ := strconv.Atoi(matches[3])
				
				var targetDate time.Time
				switch matches[1] {
				case "—Å–µ–≥–æ–¥–Ω—è":
					targetDate = now
				case "–∑–∞–≤—Ç—Ä–∞":
					targetDate = now.AddDate(0, 0, 1)
				case "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
					targetDate = now.AddDate(0, 0, 2)
				}
				
				return time.Date(targetDate.Year(), targetDate.Month(), targetDate.Day(), 
					hour, minute, 0, 0, now.Location()), nil
			},
		},
		// –§–æ—Ä–º–∞—Ç –¥–¥.–º–º —á—á:–º–º
		{
			regex: `^(\d{1,2})\.(\d{1,2})\s+(\d{1,2}):(\d{2})$`,
			parse: func(matches []string) (time.Time, error) {
				day, _ := strconv.Atoi(matches[1])
				month, _ := strconv.Atoi(matches[2])
				hour, _ := strconv.Atoi(matches[3])
				minute, _ := strconv.Atoi(matches[4])
				
				year := now.Year()
				// –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
				targetDate := time.Date(year, time.Month(month), day, hour, minute, 0, 0, now.Location())
				if targetDate.Before(now) {
					targetDate = targetDate.AddDate(1, 0, 0)
				}
				
				return targetDate, nil
			},
		},
	}
	
	// –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
	for _, pattern := range patterns {
		re := regexp.MustCompile(pattern.regex)
		if matches := re.FindStringSubmatch(input); matches != nil {
			return pattern.parse(matches)
		}
	}
	
	return time.Time{}, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '2025-08-15 14:00', '–∑–∞–≤—Ç—Ä–∞ 16:00', '15.08 14:00'")
}

// ========================= –ë–ï–õ–û–ï –ü–Ø–¢–ù–û #1: –ö–û–ú–ê–ù–î–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø =========================

// handleRestoreLessonCommand - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
func handleRestoreLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || role != "admin" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/restore_lesson <lesson_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/restore_lesson 15`\n\n" +
			"**–î–µ–π—Å—Ç–≤–∏—è:**\n" +
			"‚Ä¢ –£—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º\n" +
			"‚Ä¢ –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏\n" +
			"‚Ä¢ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏\n\n" +
			"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º!"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞: "+lessonIDStr)
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
	var lessonData struct {
		ID          int
		SubjectName string
		TeacherName string
		StartTime   string
		IsActive    bool
		TeacherID   int
	}
	
	query := `
		SELECT l.id, s.name as subject_name, u.full_name as teacher_name, 
			   l.start_time, l.is_active, t.id as teacher_id
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		JOIN teachers t ON l.teacher_id = t.id
		JOIN users u ON t.user_id = u.id
		WHERE l.id = $1`
	
	err = db.QueryRow(query, lessonID).Scan(
		&lessonData.ID,
		&lessonData.SubjectName,
		&lessonData.TeacherName,
		&lessonData.StartTime,
		&lessonData.IsActive,
		&lessonData.TeacherID,
	)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ —Å ID "+lessonIDStr+" –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —É—Ä–æ–∫–∞")
		return
	}
	
	if lessonData.IsActive {
		sendMessage(bot, message.Chat.ID, "‚úÖ –£—Ä–æ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
	var teacherActive bool
	err = db.QueryRow("SELECT u.is_active FROM users u JOIN teachers t ON u.id = t.user_id WHERE t.id = $1", 
		lessonData.TeacherID).Scan(&teacherActive)
	
	if err != nil || !teacherActive {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫ - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (–Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —É —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
	var conflictCount int
	err = db.QueryRow(`
		SELECT COUNT(*) FROM lessons 
		WHERE teacher_id = $1 AND start_time = $2 AND is_active = true AND id != $3`,
		lessonData.TeacherID, lessonData.StartTime, lessonID).Scan(&conflictCount)
	
	if err == nil && conflictCount > 0 {
		sendMessage(bot, message.Chat.ID, 
			"‚ö†Ô∏è **–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!**\n\n"+
			"–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è **"+lessonData.TeacherName+"** —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫ "+
			"–≤ —ç—Ç–æ –≤—Ä–µ–º—è: "+lessonData.StartTime[:16]+"\n\n"+
			"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.")
		return
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}
	defer tx.Rollback()
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–∫
	_, err = tx.Exec("UPDATE lessons SET is_active = true WHERE id = $1", lessonID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞")
		return
	}
	
	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
		return
	}
	
	// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	sent, failed := notifyPreviouslyEnrolledStudents(bot, db, lessonID, lessonData)
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	reportText := fmt.Sprintf(
		"‚úÖ **–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"+
		"üÜî ID —É—Ä–æ–∫–∞: %d\n"+
		"üìö –ü—Ä–µ–¥–º–µ—Ç: %s\n"+
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n"+
		"üìÖ –í—Ä–µ–º—è: %s\n\n"+
		"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: %d\n"+
		"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: %d\n\n"+
		"üîÑ –£—Ä–æ–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏",
		lessonID, lessonData.SubjectName, lessonData.TeacherName,
		lessonData.StartTime[:16], sent, failed)
	
	sendMessage(bot, message.Chat.ID, reportText)
}

// handleRestoreTeacherCommand - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleRestoreTeacherCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || role != "admin" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/restore_teacher <teacher_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/restore_teacher 5`\n\n" +
			"**–î–µ–π—Å—Ç–≤–∏—è:**\n" +
			"‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º\n" +
			"‚Ä¢ –í—Å–µ –µ–≥–æ –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è\n" +
			"‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤\n\n" +
			"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list_teachers` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	teacherIDStr := args[1]
	teacherID, err := strconv.Atoi(teacherIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: "+teacherIDStr)
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
	var teacherData struct {
		ID       int
		Name     string
		IsActive bool
		UserID   int
	}
	
	query := `
		SELECT t.id, u.full_name, u.is_active, u.id as user_id
		FROM teachers t
		JOIN users u ON t.user_id = u.id
		WHERE t.id = $1`
	
	err = db.QueryRow(query, teacherID).Scan(
		&teacherData.ID,
		&teacherData.Name,
		&teacherData.IsActive,
		&teacherData.UserID,
	)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å ID "+teacherIDStr+" –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	if teacherData.IsActive {
		sendMessage(bot, message.Chat.ID, "‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å **"+teacherData.Name+"** —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	var canceledLessonsCount int
	err = db.QueryRow(`
		SELECT COUNT(*) FROM lessons 
		WHERE teacher_id = $1 AND is_active = false AND start_time > NOW()`,
		teacherID).Scan(&canceledLessonsCount)
	
	if err != nil {
		canceledLessonsCount = 0
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}
	defer tx.Rollback()
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec("UPDATE users SET is_active = true WHERE id = $1", teacherData.UserID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –µ–≥–æ –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏
	result, err := tx.Exec(`
		UPDATE lessons SET is_active = true 
		WHERE teacher_id = $1 AND is_active = false AND start_time > NOW()`,
		teacherID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
		return
	}
	
	restoredLessons, _ := result.RowsAffected()
	
	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
		return
	}
	
	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
	sent, failed := notifyStudentsAboutTeacherRestoration(bot, db, teacherID, teacherData.Name)
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	reportText := fmt.Sprintf(
		"‚úÖ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"+
		"üÜî ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %d\n"+
		"üë®‚Äçüè´ –ò–º—è: %s\n\n"+
		"üìö –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: %d –∏–∑ %d\n"+
		"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: %d\n"+
		"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: %d\n\n"+
		"üéØ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è",
		teacherID, teacherData.Name, restoredLessons, canceledLessonsCount, sent, failed)
	
	sendMessage(bot, message.Chat.ID, reportText)
}

// notifyPreviouslyEnrolledStudents - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞
func notifyPreviouslyEnrolledStudents(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, lessonData struct {
	ID          int
	SubjectName string
	TeacherName string
	StartTime   string
	IsActive    bool
	TeacherID   int
}) (int, int) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	query := `
		SELECT u.tg_id, u.full_name
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1 AND e.status = 'enrolled'`
	
	rows, err := db.Query(query, lessonID)
	if err != nil {
		return 0, 0
	}
	defer rows.Close()
	
	sent := 0
	failed := 0
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName string
		
		if err := rows.Scan(&studentTelegramID, &studentName); err != nil {
			failed++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "üéâ **–£–†–û–ö –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù!**\n\n" +
			"üìö –ü—Ä–µ–¥–º–µ—Ç: " + lessonData.SubjectName + "\n" +
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + lessonData.TeacherName + "\n" +
			"üìÖ –í—Ä–µ–º—è: " + lessonData.StartTime[:16] + "\n\n" +
			"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π - —É—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç—Å—è!\n" +
			"üéØ –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏!"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º (3 –ø–æ–ø—ã—Ç–∫–∏)
		success := false
		for attempt := 0; attempt < 3; attempt++ {
			if _, err := bot.Send(msg); err == nil {
				success = true
				break
			}
			time.Sleep(500 * time.Millisecond)
		}
		
		if success {
			sent++
		} else {
			failed++
		}
	}
	
	return sent, failed
}

// notifyStudentsAboutTeacherRestoration - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func notifyStudentsAboutTeacherRestoration(bot *tgbotapi.BotAPI, db *sql.DB, teacherID int, teacherName string) (int, int) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
	query := `
		SELECT DISTINCT u.tg_id, u.full_name,
			STRING_AGG(
				s.name || ' (' || l.start_time::date || ' ' || l.start_time::time || ')',
				E'\n‚Ä¢ '
			) as lessons_info
		FROM enrollments e
		JOIN students st ON e.student_id = st.id
		JOIN users u ON st.user_id = u.id
		JOIN lessons l ON e.lesson_id = l.id
		JOIN subjects s ON l.subject_id = s.id
		WHERE l.teacher_id = $1 AND l.is_active = true AND l.start_time > NOW()
			AND e.status = 'enrolled'
		GROUP BY u.tg_id, u.full_name`
	
	rows, err := db.Query(query, teacherID)
	if err != nil {
		return 0, 0
	}
	defer rows.Close()
	
	sent := 0
	failed := 0
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName, lessonsInfo string
		
		if err := rows.Scan(&studentTelegramID, &studentName, &lessonsInfo); err != nil {
			failed++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "üéâ **–û–¢–õ–ò–ß–ù–´–ï –ù–û–í–û–°–¢–ò!**\n\n" +
			"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å **" + teacherName + "** –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É!\n\n" +
			"üìö **–í–∞—à–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:**\n" +
			"‚Ä¢ " + lessonsInfo + "\n\n" +
			"‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏\n" +
			"üéØ –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º
		success := false
		for attempt := 0; attempt < 3; attempt++ {
			if _, err := bot.Send(msg); err == nil {
				success = true
				break
			}
			time.Sleep(500 * time.Millisecond)
		}
		
		if success {
			sent++
		} else {
			failed++
		}
	}
	
	return sent, failed
}

// ========================= –ë–ï–õ–û–ï –ü–Ø–¢–ù–û #3: RATE LIMITING –°–¢–ê–¢–ò–°–¢–ò–ö–ê =========================

// handleRateLimitStatsCommand - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting
func handleRateLimitStatsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	if GlobalRateLimiter == nil {
		sendMessage(bot, message.Chat.ID, "‚ùå Rate limiter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	activeCount, err := GlobalRateLimiter.GetActiveOperationsCount()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
	stats, err := getRateLimitDetailedStats(db)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		return
	}
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	report := "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê RATE LIMITING**\n\n"
	report += fmt.Sprintf("üîÑ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:** %d\n\n", activeCount)
	
	if len(stats) > 0 {
		report += "üìà **–ü–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:**\n"
		for _, stat := range stats {
			operationName := getOperationName(stat.Operation)
			report += fmt.Sprintf("‚Ä¢ %s: %d\n", operationName, stat.Count)
		}
	} else {
		report += "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n"
	}
	
	report += "\n‚è∞ **–¢–∞–π–º–∞—É—Ç:** 5 –º–∏–Ω—É—Ç\n"
	report += "üßπ **–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞:** –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, report)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// getRateLimitDetailedStats - –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting
func getRateLimitDetailedStats(db *sql.DB) ([]RateLimitStat, error) {
	query := `
		SELECT operation, COUNT(*) as count
		FROM pending_operations 
		WHERE created_at > NOW() - INTERVAL '5 minutes'
		GROUP BY operation
		ORDER BY count DESC`
	
	rows, err := db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	
	var stats []RateLimitStat
	for rows.Next() {
		var stat RateLimitStat
		if err := rows.Scan(&stat.Operation, &stat.Count); err != nil {
			continue
		}
		stats = append(stats, stat)
	}
	
	return stats, nil
}

// RateLimitStat - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting
type RateLimitStat struct {
	Operation string
	Count     int
}

// ========================= –ë–ï–õ–û–ï –ü–Ø–¢–ù–û #4: –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =========================

// handleStatsCommand - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
func handleStatsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	stats, err := getBasicSystemStats(db)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
		return
	}
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	report := "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
	report += fmt.Sprintf("üìö **–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:** %d\n", stats.ActiveLessons)
	report += fmt.Sprintf("üë• **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** %d\n", stats.TotalEnrollments)
	report += fmt.Sprintf("‚è≥ **–í –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è:** %d\n", stats.WaitlistCount)
	report += fmt.Sprintf("üë®‚Äçüè´ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:** %d\n", stats.ActiveTeachers)
	report += fmt.Sprintf("üéì **–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:** %d\n", stats.ActiveStudents)
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if GlobalRateLimiter != nil {
		if activeOps, err := GlobalRateLimiter.GetActiveOperationsCount(); err == nil {
			report += fmt.Sprintf("üîÑ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:** %d\n", activeOps)
		}
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, report)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// getBasicSystemStats - –ø–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
func getBasicSystemStats(db *sql.DB) (*BasicSystemStats, error) {
	stats := &BasicSystemStats{}
	
	// –ê–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏
	err := db.QueryRow(`
		SELECT COUNT(*) FROM lessons 
		WHERE start_time > NOW() AND status = 'active' AND soft_deleted = false`).Scan(&stats.ActiveLessons)
	if err != nil {
		return nil, err
	}
	
	// –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
	err = db.QueryRow(`
		SELECT COUNT(*) FROM enrollments 
		WHERE status = 'enrolled'`).Scan(&stats.TotalEnrollments)
	if err != nil {
		return nil, err
	}
	
	// –í –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
	err = db.QueryRow(`
		SELECT COUNT(*) FROM waitlist`).Scan(&stats.WaitlistCount)
	if err != nil {
		return nil, err
	}
	
	// –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
	err = db.QueryRow(`
		SELECT COUNT(*) FROM teachers t
		JOIN users u ON t.user_id = u.id
		WHERE u.is_active = true`).Scan(&stats.ActiveTeachers)
	if err != nil {
		return nil, err
	}
	
	// –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã
	err = db.QueryRow(`
		SELECT COUNT(*) FROM students s
		JOIN users u ON s.user_id = u.id
		WHERE u.is_active = true`).Scan(&stats.ActiveStudents)
	if err != nil {
		return nil, err
	}
	
	return stats, nil
}

// BasicSystemStats - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
type BasicSystemStats struct {
	ActiveLessons    int
	TotalEnrollments int
	WaitlistCount    int
	ActiveTeachers   int
	ActiveStudents   int
}
