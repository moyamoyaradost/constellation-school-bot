package handlers

import (
	"database/sql"
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ main)
var GlobalRateLimiter *RateLimiter

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
func handleStudentCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	switch message.Command() {
	case "subjects":
		handleSubjectsCommand(bot, message, db)
	case "schedule":
		handleScheduleCommand(bot, message, db)
	case "enroll":
		// –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫
		lessonID := ExtractLessonIDFromMessage(message)
		handleEnrollWithRateLimit(bot, message, db, lessonID)
	case "waitlist":
		// –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å
		lessonID := ExtractLessonIDFromMessage(message)
		handleWaitlistWithRateLimit(bot, message, db, lessonID)
	case "my_lessons":
		handleMyLessonsCommand(bot, message, db)
	}
}

// –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
func handleSubjectsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	rows, err := db.Query("SELECT name, description, category FROM subjects WHERE is_active = true ORDER BY name")
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
		return
	}
	defer rows.Close()

	var subjects []string
	for rows.Next() {
		var name, description, category string
		if err := rows.Scan(&name, &description, &category); err != nil {
			continue
		}
		subjects = append(subjects, fmt.Sprintf("üìö **%s** (%s)\n%s", name, category, description))
	}

	if len(subjects) == 0 {
		sendMessage(bot, message.Chat.ID, "üìö –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
		return
	}

	text := "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**\n\n" + strings.Join(subjects, "\n\n")
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
func handleScheduleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userRole, err := getUserRole(db, message.From.ID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
	sendScheduleWithButtons(bot, message.Chat.ID, db, userRole)
}

// –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ student_commands.go)

// –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è - –ø–æ–∫–∞–∑ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
func handleWaitlistCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏, –≥–¥–µ –Ω–µ—Ç –º–µ—Å—Ç (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è)
	rows, err := db.Query(`
		SELECT l.id, l.start_time, s.name, u.full_name, l.max_students,
			COUNT(e.id) as enrolled_count
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id  
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		LEFT JOIN enrollments e ON l.id = e.lesson_id AND e.status = 'enrolled'
		WHERE l.start_time > NOW() AND l.start_time < NOW() + INTERVAL '7 days'
			AND l.soft_deleted = false AND l.status = 'active'
		GROUP BY l.id, l.start_time, s.name, u.full_name, l.max_students
		HAVING COUNT(e.id) >= l.max_students
		ORDER BY l.start_time LIMIT 5`)
		
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
		return
	}
	defer rows.Close()

	hasLessons := false
	for rows.Next() {
		hasLessons = true
		var lessonID int
		var startTime time.Time
		var subjectName, teacherName string
		var maxStudents, enrolledCount int
		
		if err := rows.Scan(&lessonID, &startTime, &subjectName, &teacherName, &maxStudents, &enrolledCount); err != nil {
			continue
		}
		
		text := fmt.Sprintf("üìÖ **%s**\nüìö %s\nüë®‚Äçüè´ %s\nüî¥ –ú–µ—Å—Ç –Ω–µ—Ç (%d/%d)", 
			startTime.Format("02.01.2006 15:04"), subjectName, teacherName, enrolledCount, maxStudents)

		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
		buttons := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è≥ –í –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è", fmt.Sprintf("waitlist_lesson_%d", lessonID)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", fmt.Sprintf("info_lesson_%d", lessonID)),
			),
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		bot.Send(msg)
	}

	if !hasLessons {
		sendMessage(bot, message.Chat.ID, "‚è≥ –í—Å–µ —É—Ä–æ–∫–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∏–º–µ—é—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /enroll –¥–ª—è –∑–∞–ø–∏—Å–∏")
	}
}

// –ú–æ–∏ —É—Ä–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
func handleMyLessonsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	// –ü–æ–ª—É—á–∞–µ–º student_id
	studentID, err := getStudentID(db, int(message.From.ID))
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç")
		return
	}

	// –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞
	rows, err := db.Query(`
		SELECT l.id, l.start_time, s.name, u.full_name, e.status
		FROM enrollments e
		JOIN lessons l ON e.lesson_id = l.id
		JOIN subjects s ON l.subject_id = s.id  
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE e.student_id = $1 AND e.status = 'enrolled' 
			AND l.start_time > NOW() AND l.soft_deleted = false
		ORDER BY l.start_time`, studentID)
		
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö —É—Ä–æ–∫–æ–≤")
		return
	}
	defer rows.Close()

	hasLessons := false
	for rows.Next() {
		hasLessons = true
		var lessonID int
		var startTime time.Time
		var subjectName, teacherName, status string
		
		if err := rows.Scan(&lessonID, &startTime, &subjectName, &teacherName, &status); err != nil {
			continue
		}
		
		text := fmt.Sprintf("üìÖ **%s**\nüìö %s\nüë®‚Äçüè´ %s\n‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã", 
			startTime.Format("02.01.2006 15:04"), subjectName, teacherName)

		// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—å—é
		buttons := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", fmt.Sprintf("unenroll_lesson_%d", lessonID)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", fmt.Sprintf("info_lesson_%d", lessonID)),
			),
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		bot.Send(msg)
	}

	if !hasLessons {
		sendMessage(bot, message.Chat.ID, "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —É—Ä–æ–∫–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /enroll –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫")
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
	rows2, err := db.Query(`
		SELECT l.id, l.start_time, s.name, u.full_name
		FROM waitlist w
		JOIN lessons l ON w.lesson_id = l.id
		JOIN subjects s ON l.subject_id = s.id  
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE w.student_id = $1 AND l.start_time > NOW() 
			AND l.soft_deleted = false
		ORDER BY l.start_time`, studentID)
		
	if err == nil {
		defer rows2.Close()
		
		waitlistCount := 0
		for rows2.Next() {
			if waitlistCount == 0 {
				sendMessage(bot, message.Chat.ID, "‚è≥ **–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è:**")
			}
			waitlistCount++
			
			var lessonID int
			var startTime time.Time
			var subjectName, teacherName string
			
			if err := rows2.Scan(&lessonID, &startTime, &subjectName, &teacherName); err != nil {
				continue
			}
			
			text := fmt.Sprintf("üìÖ %s\nüìö %s\nüë®‚Äçüè´ %s\n‚è≥ –í –æ—á–µ—Ä–µ–¥–∏", 
				startTime.Format("02.01.2006 15:04"), subjectName, teacherName)
			
			sendMessage(bot, message.Chat.ID, text)
		}
	}
}

// ========================= –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø RATE-LIMITING =========================

// handleEnrollWithRateLimit - –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫ —Å rate limiting
func handleEnrollWithRateLimit(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB, lessonID int) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
	if GlobalRateLimiter != nil {
		allowed, reason := GlobalRateLimiter.IsOperationAllowed(userID, OPERATION_ENROLL, lessonID)
		if !allowed {
			sendMessage(bot, message.Chat.ID, reason.Error())
			return
		}
		
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
		if err := GlobalRateLimiter.StartOperation(userID, OPERATION_ENROLL, lessonID); err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		
		// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
		handleEnrollCommand(bot, message, db)
		
		// –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
		GlobalRateLimiter.FinishOperation(userID, OPERATION_ENROLL, lessonID)
	} else {
		// Fallback –µ—Å–ª–∏ rate limiter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
		handleEnrollCommand(bot, message, db)
	}
}

// handleWaitlistWithRateLimit - –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å —Å rate limiting  
func handleWaitlistWithRateLimit(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB, lessonID int) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
	if GlobalRateLimiter != nil {
		allowed, reason := GlobalRateLimiter.IsOperationAllowed(userID, OPERATION_WAITLIST, lessonID)
		if !allowed {
			sendMessage(bot, message.Chat.ID, reason.Error())
			return
		}
		
		// –†–µ–≥–∏—Å—Çr–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
		if err := GlobalRateLimiter.StartOperation(userID, OPERATION_WAITLIST, lessonID); err != nil {
			sendMessage(bot, message.Chat.ID, "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		
		// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
		handleWaitlistCommand(bot, message, db)
		
		// –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
		GlobalRateLimiter.FinishOperation(userID, OPERATION_WAITLIST, lessonID)
	} else {
		// Fallback –µ—Å–ª–∏ rate limiter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
		handleWaitlistCommand(bot, message, db)
	}
}
