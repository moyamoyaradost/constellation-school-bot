package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	if update.Message != nil {
		handleMessage(bot, update.Message, db)
	} else if update.CallbackQuery != nil {
		handleCallbackQuery(bot, update.CallbackQuery, db)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	if message.IsCommand() {
		handleCommand(bot, message, db)
	} else {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ FSM
		handleTextMessage(bot, message, db)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	switch message.Command() {
	case "start":
		handleStart(bot, message, db)
	case "register":
		handleRegister(bot, message, db)
	case "help":
		handleHelp(bot, message, db)
	case "subjects":
		handleSubjectsCommand(bot, message, db)
	case "schedule":
		handleScheduleCommand(bot, message, db)
	case "my_lessons":
		handleMyLessonsCommand(bot, message, db)
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, 
			"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
func handleCallbackQuery(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	callback := tgbotapi.NewCallback(query.ID, "")
	bot.Request(callback)
	
	data := query.Data
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	
	switch {
	case data == "cmd_register":
		// –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /register
		fakeMessage := &tgbotapi.Message{
			From: query.From,
			Chat: query.Message.Chat,
			Text: "/register",
		}
		handleRegister(bot, fakeMessage, db)
		
	case data == "cmd_help":
		// –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /help
		fakeMessage := &tgbotapi.Message{
			From: query.From,
			Chat: query.Message.Chat,
			Text: "/help",
		}
		handleHelp(bot, fakeMessage, db)
		
	case strings.HasPrefix(data, "subject_"):
		handleSubjectCallback(bot, query, db)
		
	case data == "finish_registration":
		finishStudentRegistration(bot, userID, chatID, db)
		
	default:
		msg := tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
		bot.Send(msg)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ callback
func handleSubjectCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if getUserState(userID) != StateSelectingSubjects {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /register")
		bot.Send(msg)
		return
	}
	
	// –ò–∑–≤–ª–µ—á—å ID –ø—Ä–µ–¥–º–µ—Ç–∞
	subjectIDStr := strings.TrimPrefix(query.Data, "subject_")
	subjectID, err := strconv.Atoi(subjectIDStr)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞")
		bot.Send(msg)
		return
	}
	
	// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
	initUserData(userID)
	var selectedSubjects []int
	if subjects, exists := userData[userID]["selected_subjects"]; exists {
		selectedSubjects = subjects.([]int)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
	var alreadySelected bool
	var newSubjects []int
	
	for _, id := range selectedSubjects {
		if id == subjectID {
			alreadySelected = true
		} else {
			newSubjects = append(newSubjects, id)
		}
	}
	
	// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
	var subjectName string
	db.QueryRow("SELECT name FROM subjects WHERE id = $1", subjectID).Scan(&subjectName)
	
	var responseText string
	if alreadySelected {
		// –£–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
		userData[userID]["selected_subjects"] = newSubjects
		responseText = fmt.Sprintf("‚ûñ –ü—Ä–µ–¥–º–µ—Ç '%s' —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞", subjectName)
	} else {
		// –î–æ–±–∞–≤–∏—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
		newSubjects = append(selectedSubjects, subjectID)
		userData[userID]["selected_subjects"] = newSubjects
		responseText = fmt.Sprintf("‚ûï –ü—Ä–µ–¥–º–µ—Ç '%s' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫", subjectName)
	}
	
	// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
	var currentSubjects []string
	for _, id := range newSubjects {
		var name string
		db.QueryRow("SELECT name FROM subjects WHERE id = $1", id).Scan(&name)
		currentSubjects = append(currentSubjects, name)
	}
	
	if len(currentSubjects) > 0 {
		responseText += fmt.Sprintf("\n\n‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n‚Ä¢ %s", 
			strings.Join(currentSubjects, "\n‚Ä¢ "))
	} else {
		responseText += "\n\nüìù –ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"
	}
	
	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, responseText)
	bot.Send(msg)
}

// –ö–æ–º–∞–Ω–¥–∞ /help
func handleHelp(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	var helpText string
	
	if err == sql.ErrNoRows {
		// –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		helpText = "üÜò –ü–æ–º–æ—â—å - Constellation School Bot\n\n" +
			"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n" +
			"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"/start - –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n" +
			"/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
			"/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
			"üéØ –û –¶–µ–Ω—Ç—Ä–µ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–∞:\n" +
			"–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º 6 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±—É—á–µ–Ω–∏—è:\n" +
			"‚Ä¢ 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
			"‚Ä¢ –ì–µ–π–º–¥–µ–≤\n" +
			"‚Ä¢ VFX-–¥–∏–∑–∞–π–Ω\n" +
			"‚Ä¢ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω\n" +
			"‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n" +
			"‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"
			
	} else if err != nil {
		helpText = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
		
	} else {
		switch role {
		case "student":
			helpText = "üÜò –ü–æ–º–æ—â—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n\n" +
				"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
				"/subjects - –≤—ã–±–æ—Ä/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n" +
				"/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤\n" +
				"/my_lessons - –º–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫–∏\n" +
				"/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
				"‚ùì –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫:\n" +
				"1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤\n" +
				"2. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' —É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞\n" +
				"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å\n\n" +
				"üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
				
		case "teacher":
			helpText = "üÜò –ü–æ–º–æ—â—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n\n" +
				"üë®‚Äçüè´ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
				"/my_lessons - –º–æ–∏ —É—Ä–æ–∫–∏\n" +
				"/my_students - —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–∞ –º–æ–∏—Ö —É—Ä–æ–∫–∞—Ö\n" +
				"/help_teacher - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n" +
				"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏:\n" +
				"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–≤–æ–∏—Ö —É—Ä–æ–∫–æ–≤\n" +
				"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n" +
				"‚Ä¢ –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
				
		case "superuser":
			helpText = "üÜò –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n" +
				"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
				"/add_teacher - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n" +
				"/create_lesson - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫\n" +
				"/system_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n" +
				"/manage_subjects - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n\n" +
				"‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n" +
				"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏\n" +
				"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏\n" +
				"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
				
		default:
			helpText = "üÜò –ü–æ–º–æ—â—å\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
		}
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	bot.Send(msg)
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö)
func handleSubjectsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	msg := tgbotapi.NewMessage(message.Chat.ID, 
		"üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
	bot.Send(msg)
}

func handleScheduleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	msg := tgbotapi.NewMessage(message.Chat.ID, 
		"üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
	bot.Send(msg)
}

func handleMyLessonsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	msg := tgbotapi.NewMessage(message.Chat.ID, 
		"üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —É—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
	bot.Send(msg)
}
