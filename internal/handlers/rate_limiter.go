package handlers

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"strconv"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ========================= –ë–ï–õ–û–ï –ü–Ø–¢–ù–û #3: RATE-LIMITING =========================

const (
	OPERATION_ENROLL    = "enroll"
	OPERATION_WAITLIST  = "waitlist"
	OPERATION_CANCEL    = "cancel"
	TIMEOUT_MINUTES     = 5 // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö
)

// RateLimiter - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è rate limiting
type RateLimiter struct {
	db *sql.DB
	mu sync.RWMutex
}

// NewRateLimiter - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π instance rate limiter
func NewRateLimiter(db *sql.DB) *RateLimiter {
	return &RateLimiter{db: db}
}

// IsOperationAllowed - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
func (rl *RateLimiter) IsOperationAllowed(userID int64, operation string, lessonID int) (bool, error) {
	rl.mu.RLock()
	defer rl.mu.RUnlock()

	// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ë–î –ø–æ tg_id
	var dbUserID int
	userIDStr := strconv.FormatInt(userID, 10)
	err := rl.db.QueryRow("SELECT id FROM users WHERE tg_id = $1", userIDStr).Scan(&dbUserID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id: %v", err)
		return false, errors.New("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var pendingCount int
	err = rl.db.QueryRow(fmt.Sprintf(`
		SELECT COUNT(*) FROM pending_operations 
		WHERE user_id = $1 AND operation = $2 AND created_at > NOW() - INTERVAL '%d minutes'`, TIMEOUT_MINUTES),
		dbUserID, operation).Scan(&pendingCount)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending operations: %v", err)
		return false, errors.New("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
	}

	if pendingCount > 0 {
		return false, fmt.Errorf("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è '%s'.\n"+
			"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", getOperationName(operation))
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞ (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
	if lessonID > 0 {
		var lessonPendingCount int
		err = rl.db.QueryRow(fmt.Sprintf(`
			SELECT COUNT(*) FROM pending_operations 
			WHERE user_id = $1 AND lesson_id = $2 AND created_at > NOW() - INTERVAL '%d minutes'`, TIMEOUT_MINUTES),
			dbUserID, lessonID).Scan(&lessonPendingCount)
		
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ lesson-specific pending operations: %v", err)
			return false, errors.New("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
		}

		if lessonPendingCount > 0 {
			return false, errors.New("‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
		}
	}
	
	return true, nil
}

// StartOperation - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
func (rl *RateLimiter) StartOperation(userID int64, operation string, lessonID int) error {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ë–î –ø–æ tg_id
	var dbUserID int
	userIDStr := strconv.FormatInt(userID, 10)
	err := rl.db.QueryRow("SELECT id FROM users WHERE tg_id = $1", userIDStr).Scan(&dbUserID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –¥–ª—è StartOperation: %v", err)
		return errors.New("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	_, err = rl.db.Exec(`
		INSERT INTO pending_operations (user_id, operation, lesson_id, created_at)
		VALUES ($1, $2, $3, NOW())`,
		dbUserID, operation, lessonID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è pending operation: %v", err)
		return errors.New("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
	}
	
	log.Printf("üîÑ –ù–∞—á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: user=%d, operation=%s, lesson=%d", userID, operation, lessonID)
	return nil
}

// FinishOperation - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
func (rl *RateLimiter) FinishOperation(userID int64, operation string, lessonID int) error {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ë–î –ø–æ tg_id
	var dbUserID int
	userIDStr := strconv.FormatInt(userID, 10)
	err := rl.db.QueryRow("SELECT id FROM users WHERE tg_id = $1", userIDStr).Scan(&dbUserID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –¥–ª—è FinishOperation: %v", err)
		return errors.New("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
	}

	// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
	_, err = rl.db.Exec(`
		DELETE FROM pending_operations 
		WHERE user_id = $1 AND operation = $2 AND lesson_id = $3`,
		dbUserID, operation, lessonID)
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è pending operation: %v", err)
		return errors.New("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
	}
	
	log.Printf("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: user=%d, operation=%s, lesson=%d", userID, operation, lessonID)
	return nil
}

// CleanupExpiredOperations - –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
func (rl *RateLimiter) CleanupExpiredOperations() error {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	result, err := rl.db.Exec(fmt.Sprintf(`
		DELETE FROM pending_operations 
		WHERE created_at < NOW() - INTERVAL '%d minutes'`, TIMEOUT_MINUTES))
	
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ expired operations: %v", err)
		return err
	}
	
	rowsAffected, _ := result.RowsAffected()
	if rowsAffected > 0 {
		log.Printf("üóëÔ∏è –û—á–∏—â–µ–Ω–æ %d –∏—Å—Ç–µ–∫—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", rowsAffected)
	}
	
	return nil
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
func (rl *RateLimiter) StartCleanupWorker() {
	go func() {
		ticker := time.NewTicker(2 * time.Minute) // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
		defer ticker.Stop()
		
		for range ticker.C {
			err := rl.CleanupExpiredOperations()
			if err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: %v", err)
			}
		}
	}()
}

// getOperationName - –ø–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
func getOperationName(operation string) string {
	switch operation {
	case OPERATION_ENROLL:
		return "–∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫"
	case OPERATION_WAITLIST:
		return "–ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è"
	case OPERATION_CANCEL:
		return "–æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"
	default:
		return operation
	}
}

// ========================= –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò =========================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
var globalRateLimiter *RateLimiter

// InitializeRateLimiter - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
func InitializeRateLimiter(db *sql.DB) {
	globalRateLimiter = NewRateLimiter(db)
	globalRateLimiter.StartCleanupWorker()
	log.Println("üöÄ Rate Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
}

// ExtractLessonIDFromMessage - –∏–∑–≤–ª–µ–∫–∞–µ—Ç lesson_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è  
func ExtractLessonIDFromMessage(message *tgbotapi.Message) int {
	if message.Text == "" {
		return 0
	}
	
	// –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := message.CommandArguments()
	if args != "" {
		if id, err := strconv.Atoi(args); err == nil {
			return id
		}
	}
	
	return 0
}
