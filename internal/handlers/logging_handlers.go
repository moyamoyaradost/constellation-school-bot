package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
type SimpleLog struct {
	ID        int
	Action    string
	UserID    *int
	Details   string
	CreatedAt time.Time
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ë–î
func LogAction(db *sql.DB, action string, userID *int, details string) error {
	_, err := db.Exec(`
		INSERT INTO simple_logs (action, user_id, details, created_at)
		VALUES ($1, $2, $3, NOW())`,
		action, userID, details)
	return err
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
func GetRecentErrors(db *sql.DB, limit int) ([]SimpleLog, error) {
	rows, err := db.Query(`
		SELECT id, action, user_id, details, created_at
		FROM simple_logs
		WHERE action LIKE '%error%' OR action LIKE '%–æ—à–∏–±–∫–∞%'
		ORDER BY created_at DESC
		LIMIT $1`, limit)
	
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	
	var logs []SimpleLog
	for rows.Next() {
		var log SimpleLog
		if err := rows.Scan(&log.ID, &log.Action, &log.UserID, &log.Details, &log.CreatedAt); err != nil {
			continue
		}
		logs = append(logs, log)
	}
	
	return logs, nil
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
func handleLogRecentErrorsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	limit := 10 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –∑–∞–ø–∏—Å–µ–π
	
	if len(args) >= 2 {
		if parsedLimit, err := strconv.Atoi(args[1]); err == nil && parsedLimit > 0 && parsedLimit <= 50 {
			limit = parsedLimit
		}
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
	logs, err := GetRecentErrors(db, limit)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤")
		return
	}
	
	if len(logs) == 0 {
		sendMessage(bot, message.Chat.ID, "‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return
	}
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	var report strings.Builder
	report.WriteString(fmt.Sprintf("üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ (%d –∑–∞–ø–∏—Å–µ–π)**\n\n", len(logs)))
	
	for i, log := range logs {
		report.WriteString(fmt.Sprintf("**%d.** %s\n", i+1, log.Action))
		if log.UserID != nil {
			report.WriteString(fmt.Sprintf("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n", *log.UserID))
		}
		if log.Details != "" {
			// –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
			details := log.Details
			if len(details) > 100 {
				details = details[:100] + "..."
			}
			report.WriteString(fmt.Sprintf("   üìù –î–µ—Ç–∞–ª–∏: %s\n", details))
		}
		report.WriteString(fmt.Sprintf("   ‚è∞ %s\n\n", log.CreatedAt.Format("02.01.2006 15:04:05")))
	}
	
	// –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	reportText := report.String()
	if len(reportText) > 4000 {
		reportText = reportText[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, reportText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func LogError(db *sql.DB, action string, userID int64, details string) {
	userIDInt := int(userID)
	LogAction(db, "ERROR: "+action, &userIDInt, details)
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func LogUserAction(db *sql.DB, action string, userID int64, details string) {
	userIDInt := int(userID)
	LogAction(db, action, &userIDInt, details)
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
func LogSystemAction(db *sql.DB, action string, details string) {
	LogAction(db, "SYSTEM: "+action, nil, details)
}
