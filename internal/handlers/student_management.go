package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ SuperUser)
func handleDeactivateStudentCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)

	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "üö´ **–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/deactivate_student <user_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/deactivate_student 123456789`\n" +
			"‚Ä¢ `/deactivate_student 987654321`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (is_active = false)\n" +
			"‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —É—Ä–æ–∫–∏\n" +
			"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ª–∏—Å—Ç–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è\n" +
			"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/activate_student` - –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n" +
			"‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º user_id
	studentUserIDStr := args[1]
	studentUserID, err := strconv.Atoi(studentUserIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	var fullName, currentRole string
	var isActive bool
	err = db.QueryRow("SELECT full_name, role, is_active FROM users WHERE id = $1", studentUserID).Scan(&fullName, &currentRole, &isActive)

	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	if currentRole != "student" {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º")
		return
	}

	if !isActive {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
	var activeEnrollments int
	err = db.QueryRow(`
		SELECT COUNT(*) 
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		WHERE s.user_id = $1 AND e.status = 'enrolled'`, studentUserID).Scan(&activeEnrollments)
	if err != nil {
		activeEnrollments = 0
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
	var waitlistEntries int
	err = db.QueryRow(`
		SELECT COUNT(*) 
		FROM waitlist w
		JOIN students s ON w.student_id = s.id
		WHERE s.user_id = $1`, studentUserID).Scan(&waitlistEntries)
	if err != nil {
		waitlistEntries = 0
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}
	defer tx.Rollback()

	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = tx.Exec("UPDATE users SET is_active = false WHERE id = $1", studentUserID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	// –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫–∏
	_, err = tx.Exec(`
		UPDATE enrollments 
		SET status = 'cancelled' 
		WHERE student_id IN (
			SELECT id FROM students WHERE user_id = $1
		) AND status = 'enrolled'`, studentUserID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è
	_, err = tx.Exec(`
		DELETE FROM waitlist 
		WHERE student_id IN (
			SELECT id FROM students WHERE user_id = $1
		)`, studentUserID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è")
		return
	}

	// –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞
	LogSystemAction(db, "student_deactivated", fmt.Sprintf("–°—Ç—É–¥–µ–Ω—Ç %s (ID: %d) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: %d, —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è: %d", fullName, studentUserID, activeEnrollments, waitlistEntries))

	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–°—Ç—É–¥–µ–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n\n" +
		"üë§ –°—Ç—É–¥–µ–Ω—Ç: " + fullName + "\n" +
		"üÜî ID: " + strconv.Itoa(studentUserID) + "\n\n" +
		"üìä –î–µ–π—Å—Ç–≤–∏—è:\n" +
		"‚Ä¢ üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n" +
		"‚Ä¢ üìù –û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: " + strconv.Itoa(activeEnrollments) + "\n" +
		"‚Ä¢ üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è: " + strconv.Itoa(waitlistEntries) + "\n\n" +
		"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î"

	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ SuperUser)
func handleActivateStudentCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)

	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "‚úÖ **–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/activate_student <user_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/activate_student 123456789`\n" +
			"‚Ä¢ `/activate_student 987654321`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (is_active = true)\n" +
			"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\n" +
			"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/deactivate_student` - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n" +
			"‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º user_id
	studentUserIDStr := args[1]
	studentUserID, err := strconv.Atoi(studentUserIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	var fullName, currentRole string
	var isActive bool
	err = db.QueryRow("SELECT full_name, role, is_active FROM users WHERE id = $1", studentUserID).Scan(&fullName, &currentRole, &isActive)

	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	if currentRole != "student" {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º")
		return
	}

	if isActive {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
		return
	}

	// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = db.Exec("UPDATE users SET is_active = true WHERE id = $1", studentUserID)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞
	LogSystemAction(db, "student_activated", fmt.Sprintf("–°—Ç—É–¥–µ–Ω—Ç %s (ID: %d) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", fullName, studentUserID))

	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–°—Ç—É–¥–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n\n" +
		"üë§ –°—Ç—É–¥–µ–Ω—Ç: " + fullName + "\n" +
		"üÜî ID: " + strconv.Itoa(studentUserID) + "\n\n" +
		"üìä –î–µ–π—Å—Ç–≤–∏—è:\n" +
		"‚Ä¢ ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n" +
		"‚Ä¢ üîì –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n" +
		"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î"

	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}
