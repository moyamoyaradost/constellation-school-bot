package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ SuperUser)
func handleNotifyAllCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)

	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "üì¢ **–ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/notify_all <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/notify_all –ù–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!`\n" +
			"‚Ä¢ `/notify_all –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã 15.08 —Å 20:00 –¥–æ 22:00`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" +
			"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n" +
			"‚Ä¢ –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/notify_students` - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞\n" +
			"‚Ä¢ `/remind_all` - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö"

		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notificationText := strings.Join(args[1:], " ")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	rows, err := db.Query(`
		SELECT tg_id, full_name, role 
		FROM users 
		WHERE is_active = true AND tg_id IS NOT NULL
		ORDER BY role, full_name`)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		return
	}
	defer rows.Close()

	var users []struct {
		tgID  int64
		name  string
		role  string
	}

	for rows.Next() {
		var user struct {
			tgID  int64
			name  string
			role  string
		}
		if err := rows.Scan(&user.tgID, &user.name, &user.role); err != nil {
			continue
		}
		users = append(users, user)
	}

	if len(users) == 0 {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	messageText := fmt.Sprintf("üì¢ **–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n%s", notificationText)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	sentCount := 0
	failedCount := 0
	studentsCount := 0
	teachersCount := 0
	adminsCount := 0

	for _, user := range users {
		msg := tgbotapi.NewMessage(user.tgID, messageText)
		msg.ParseMode = "Markdown"
		
		if _, err := bot.Send(msg); err != nil {
			failedCount++
		} else {
			sentCount++
			switch user.role {
			case "student":
				studentsCount++
			case "teacher":
				teachersCount++
			case "superuser":
				adminsCount++
			}
		}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	LogSystemAction(db, "mass_notification_sent", fmt.Sprintf("–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: '%s', –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –æ—à–∏–±–æ–∫: %d", notificationText[:50], sentCount, failedCount))

	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ**\n\n" +
		"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ: " + notificationText + "\n\n" +
		"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
		"‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + strconv.Itoa(sentCount) + "\n" +
		"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: " + strconv.Itoa(failedCount) + "\n\n" +
		"üë• –ü–æ —Ä–æ–ª—è–º:\n" +
		"‚Ä¢ üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã: " + strconv.Itoa(studentsCount) + "\n" +
		"‚Ä¢ üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: " + strconv.Itoa(teachersCount) + "\n" +
		"‚Ä¢ üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: " + strconv.Itoa(adminsCount)

	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ SuperUser)
func handleRemindAllCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)

	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	hoursAhead := 24 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –∑–∞ 24 —á–∞—Å–∞

	if len(args) >= 2 {
		if parsedHours, err := strconv.Atoi(args[1]); err == nil && parsedHours > 0 && parsedHours <= 168 {
			hoursAhead = parsedHours
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Ä–æ–∫–∏
	rows, err := db.Query(`
		SELECT 
			l.id,
			s.name as subject_name,
			u.full_name as teacher_name,
			l.start_time,
			l.duration_minutes,
			COUNT(e.id) as enrolled_count,
			l.max_students
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		LEFT JOIN enrollments e ON l.id = e.lesson_id AND e.status = 'enrolled'
		WHERE l.soft_deleted = false 
		AND l.start_time > NOW() 
		AND l.start_time <= NOW() + INTERVAL '1 hour' * $1
		GROUP BY l.id, s.name, u.full_name, l.start_time, l.duration_minutes, l.max_students
		ORDER BY l.start_time`, hoursAhead)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–æ–≤")
		return
	}
	defer rows.Close()

	var lessons []struct {
		id            int
		subjectName   string
		teacherName   string
		startTime     string
		duration      int
		enrolledCount int
		maxStudents   int
	}

	for rows.Next() {
		var lesson struct {
			id            int
			subjectName   string
			teacherName   string
			startTime     string
			duration      int
			enrolledCount int
			maxStudents   int
		}
		if err := rows.Scan(&lesson.id, &lesson.subjectName, &lesson.teacherName, &lesson.startTime, &lesson.duration, &lesson.enrolledCount, &lesson.maxStudents); err != nil {
			continue
		}
		lessons = append(lessons, lesson)
	}

	if len(lessons) == 0 {
		sendMessage(bot, message.Chat.ID, fmt.Sprintf("üìÖ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ %d —á–∞—Å–æ–≤", hoursAhead))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
	totalSent := 0
	totalFailed := 0

	for _, lesson := range lessons {
		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞
		studentRows, err := db.Query(`
			SELECT u.tg_id, u.full_name
			FROM enrollments e
			JOIN students s ON e.student_id = s.id
			JOIN users u ON s.user_id = u.id
			WHERE e.lesson_id = $1 AND e.status = 'enrolled'`, lesson.id)
		
		if err != nil {
			continue
		}

		reminderText := fmt.Sprintf("‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —É—Ä–æ–∫–µ**\n\n"+
			"üìö –£—Ä–æ–∫: %s\n"+
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n"+
			"‚è∞ –í—Ä–µ–º—è: %s\n"+
			"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω—É—Ç\n"+
			"üë• –ó–∞–ø–∏—Å–∞–Ω–æ: %d/%d\n\n"+
			"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —É—Ä–æ–∫—É!", 
			lesson.subjectName, lesson.teacherName, lesson.startTime[:16], 
			lesson.duration, lesson.enrolledCount, lesson.maxStudents)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º
		for studentRows.Next() {
			var tgID int64
			var fullName string
			if err := studentRows.Scan(&tgID, &fullName); err != nil {
				continue
			}

			msg := tgbotapi.NewMessage(tgID, reminderText)
			msg.ParseMode = "Markdown"
			if _, err := bot.Send(msg); err != nil {
				totalFailed++
			} else {
				totalSent++
			}
		}
		studentRows.Close()
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
	LogSystemAction(db, "reminders_sent", fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ %d —á–∞—Å–æ–≤, —É—Ä–æ–∫–æ–≤: %d, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –æ—à–∏–±–æ–∫: %d", hoursAhead, len(lessons), totalSent, totalFailed))

	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := fmt.Sprintf("‚úÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã**\n\n"+
		"‚è∞ –ü–µ—Ä–∏–æ–¥: –±–ª–∏–∂–∞–π—à–∏–µ %d —á–∞—Å–æ–≤\n"+
		"üìÖ –£—Ä–æ–∫–æ–≤: %d\n"+
		"üì§ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n"+
		"‚ùå –û—à–∏–±–æ–∫: %d", hoursAhead, len(lessons), totalSent, totalFailed)

	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}
