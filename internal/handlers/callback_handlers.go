package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
type CallbackData struct {
	Action   string
	LessonID int
	Extra    string
}

// –ü–∞—Ä—Å–∏–Ω–≥ callback –¥–∞–Ω–Ω—ã—Ö
func parseCallbackData(data string) (*CallbackData, error) {
	parts := strings.Split(data, "_")
	if len(parts) < 2 {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö: %s", data)
	}

	result := &CallbackData{
		Action: parts[0],
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ lesson_id –µ—Å–ª–∏ –µ—Å—Ç—å
	if len(parts) > 1 {
		if lessonID, err := strconv.Atoi(parts[1]); err == nil {
			result.LessonID = lessonID
		} else {
			result.Extra = parts[1]
		}
		
		if len(parts) > 3 {
			result.Extra = parts[3]
		}
	}

	return result, nil
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
func handleLessonSubjectCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	parts := strings.Split(query.Data, ":")
	if len(parts) != 2 {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
		return
	}
	
	action := parts[0] // "create_lesson" –∏–ª–∏ "delete_lesson"
	subjectID, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
	var subjectName string
	err = db.QueryRow("SELECT name FROM subjects WHERE id = $1", subjectID).Scan(&subjectName)
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userID := query.From.ID
	var role string
	err = db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || (role != "teacher" && role != "superuser") {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
		return
	}
	
	if action == "create_lesson" {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
		text := fmt.Sprintf("üìö **–°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞: %s**\n\n" +
			"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
			"`/create_lesson \"%s\" –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:**\n" +
			"`/create_lesson \"%s\" 16.08.2025 16:30`", 
			subjectName, subjectName, subjectName)
			
		editMsg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, text)
		editMsg.ParseMode = "Markdown"
		bot.Send(editMsg)
		
	} else if action == "delete_lesson" {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		showLessonsForDeletion(bot, query, db, subjectID, subjectName)
	}
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
func showLessonsForDeletion(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, subjectID int, subjectName string) {
	// –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ 
	userID := query.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	var role string
	var teacherID int
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
		
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")
		return
	}
	
	var queryStr string
	var args []interface{}
	
	if role == "teacher" {
		// –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ –∏—Ö —É—Ä–æ–∫–∏
		err = db.QueryRow(`
			SELECT t.id FROM teachers t 
			JOIN users u ON t.user_id = u.id 
			WHERE u.tg_id = $1`, strconv.FormatInt(userID, 10)).Scan(&teacherID)
		
		if err != nil {
			sendMessage(bot, query.Message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
			return
		}
		
		queryStr = `
			SELECT l.id, l.start_time, u.full_name,
				(SELECT COUNT(*) FROM enrollments WHERE lesson_id = l.id AND status = 'enrolled') as enrolled_count
			FROM lessons l 
			JOIN subjects s ON l.subject_id = s.id 
			LEFT JOIN teachers t ON l.teacher_id = t.id
			LEFT JOIN users u ON t.user_id = u.id
			WHERE l.subject_id = $1 AND l.teacher_id = $2 AND l.soft_deleted = false
				AND l.start_time > NOW()
			ORDER BY l.start_time`
		args = []interface{}{subjectID, teacherID}
	} else {
		// –î–ª—è –∞–¥–º–∏–Ω–æ–≤ - –≤—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
		queryStr = `
			SELECT l.id, l.start_time, u.full_name,
				(SELECT COUNT(*) FROM enrollments WHERE lesson_id = l.id AND status = 'enrolled') as enrolled_count
			FROM lessons l 
			JOIN subjects s ON l.subject_id = s.id 
			LEFT JOIN teachers t ON l.teacher_id = t.id
			LEFT JOIN users u ON t.user_id = u.id
			WHERE l.subject_id = $1 AND l.soft_deleted = false
				AND l.start_time > NOW()
			ORDER BY l.start_time`
		args = []interface{}{subjectID}
	}
	
	rows, err := db.Query(queryStr, args...)
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤")
		return
	}
	defer rows.Close()
	
	var buttons [][]tgbotapi.InlineKeyboardButton
	lessonCount := 0
	
	for rows.Next() {
		var lessonID int
		var startTime time.Time
		var teacherName string
		var enrolledCount int
		
		if err := rows.Scan(&lessonID, &startTime, &teacherName, &enrolledCount); err != nil {
			continue
		}
		
		lessonCount++
		buttonText := fmt.Sprintf("üìÖ %s üë®‚Äçüè´ %s (üë•%d)", 
			startTime.Format("02.01 15:04"), teacherName, enrolledCount)
		callbackData := fmt.Sprintf("confirm_delete_lesson:%d", lessonID)
		
		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}
	
	if lessonCount == 0 {
		text := fmt.Sprintf("üìö **%s**\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", subjectName)
		editMsg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, text)
		editMsg.ParseMode = "Markdown"
		bot.Send(editMsg)
		return
	}
	
	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	backButton := tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", "cancel_lesson")
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{backButton})
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	text := fmt.Sprintf("üìö **–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (%s):**\n\n" +
		"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏\n" +
		"üë• –ß–∏—Å–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", subjectName)
	
	editMsg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, text)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard
	
	bot.Send(editMsg)
}

// –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
func handleNewCallbackQuery(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	// –£–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	callback := tgbotapi.NewCallback(query.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ callback –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è create_lesson –∏ delete_lesson –∫–Ω–æ–ø–æ–∫
	if strings.HasPrefix(query.Data, "create_lesson:") || strings.HasPrefix(query.Data, "delete_lesson:") {
		handleLessonSubjectCallback(bot, query, db)
		return
	}
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
	if strings.HasPrefix(query.Data, "confirm_delete_lesson:") {
		handleConfirmDeleteLessonCallback(bot, query, db)
		return
	}
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
	if strings.HasPrefix(query.Data, "execute_delete_lesson:") {
		handleExecuteDeleteLessonCallback(bot, query, db)
		return
	}
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
	if strings.HasPrefix(query.Data, "confirm_delete_teacher_") {
		handleConfirmDeleteTeacher(bot, query, db)
		return
	}
	
	if strings.HasPrefix(query.Data, "execute_delete_teacher_") {
		handleExecuteDeleteTeacher(bot, query, db)
		return
	}
	
	if strings.HasPrefix(query.Data, "restore_teacher_") {
		handleRestoreTeacherAction(bot, query, db)
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ callback –¥–∞–Ω–Ω—ã—Ö
	callbackData, err := parseCallbackData(query.Data)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback: %v", err)
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userRole, err := getUserRole(db, query.From.ID)
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ handleInlineButton)
	switch query.Data {
	case "main_menu", "create_lesson", "cancel_lesson", "schedule", "my_lessons", 
		 "help", "profile", "teachers", "stats", "notifications", "logs", 
		 "help_teacher", "help_admin", "back_to_main", "back_to_schedule", 
		 "back", "cancel_action", "student_dashboard", "enroll_subjects", 
		 "my_lessons_menu", "school_schedule":
		handleInlineButton(bot, query, db)
		return
	}

	// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
	switch callbackData.Action {
	case "enroll":
		handleEnrollCallback(bot, query, db, callbackData, userRole)
	case "unenroll":
		handleUnenrollCallback(bot, query, db, callbackData, userRole)
	case "waitlist":
		handleWaitlistCallback(bot, query, db, callbackData, userRole)
	case "cancel":
		handleNewCancelLessonCallback(bot, query, db, callbackData, userRole)
	case "confirm":
		handleConfirmLessonCallback(bot, query, db, callbackData, userRole)
	case "schedule":
		handleScheduleCallback(bot, query, db, callbackData, userRole)
	case "info":
		handleLessonInfoCallback(bot, query, db, callbackData, userRole)
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ callback –¥–µ–π—Å—Ç–≤–∏–µ: %s (–¥–∞–Ω–Ω—ã–µ: %s)", callbackData.Action, query.Data)
		sendMessage(bot, query.Message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: " + query.Data)
	}
}

// –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫ —á–µ—Ä–µ–∑ callback
func handleEnrollCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, data *CallbackData, userRole string) {
	// –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è
	if userRole != "student" {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫–∏")
		bot.Request(callbackResponse)
		return
	}

	// ========================= RATE LIMITING =========================
	userID := query.From.ID
	if GlobalRateLimiter != nil {
		allowed, reason := GlobalRateLimiter.IsOperationAllowed(userID, OPERATION_ENROLL, data.LessonID)
		if !allowed {
			callbackResponse := tgbotapi.NewCallback(query.ID, reason.Error())
			bot.Request(callbackResponse)
			return
		}
		
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
		if err := GlobalRateLimiter.StartOperation(userID, OPERATION_ENROLL, data.LessonID); err != nil {
			callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			bot.Request(callbackResponse)
			return
		}
		
		// –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏
		defer func() {
			if err := GlobalRateLimiter.FinishOperation(userID, OPERATION_ENROLL, data.LessonID); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ rate limiting: %v", err)
			}
		}()
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–∞
	if !isLessonValid(db, data.LessonID) {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –£—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		bot.Request(callbackResponse)
		updateMessageWithExpiredLesson(bot, query.Message)
		return
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ student_id
	studentID, err := getStudentID(db, int(query.From.ID))
	if err != nil {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞")
		bot.Request(callbackResponse)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
	if isStudentEnrolled(db, studentID, data.LessonID) {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫")
		bot.Request(callbackResponse)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç
	if !hasAvailableSpots(db, data.LessonID) {
		// –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –ú–µ—Å—Ç –Ω–µ—Ç. –î–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è?")
		bot.Request(callbackResponse)
		
		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è≥ –í –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è", fmt.Sprintf("waitlist_lesson_%d", data.LessonID)),
			),
		)
		
		editMsg := tgbotapi.NewEditMessageReplyMarkup(query.Message.Chat.ID, query.Message.MessageID, keyboard)
		bot.Send(editMsg)
		return
	}

	// –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫
	err = enrollStudentInDB(db, studentID, data.LessonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫: %v", err)
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫")
		bot.Request(callbackResponse)
		return
	}

	callbackResponse := tgbotapi.NewCallback(query.ID, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Ä–æ–∫!")
	bot.Request(callbackResponse)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	updateLessonMessage(bot, query.Message, db, data.LessonID)
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫
func handleUnenrollCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, data *CallbackData, userRole string) {
	if userRole != "student" {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å—å")
		bot.Request(callbackResponse)
		return
	}

	// ========================= RATE LIMITING =========================
	userID := query.From.ID
	if GlobalRateLimiter != nil {
		allowed, reason := GlobalRateLimiter.IsOperationAllowed(userID, OPERATION_CANCEL, data.LessonID)
		if !allowed {
			callbackResponse := tgbotapi.NewCallback(query.ID, reason.Error())
			bot.Request(callbackResponse)
			return
		}
		
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
		if err := GlobalRateLimiter.StartOperation(userID, OPERATION_CANCEL, data.LessonID); err != nil {
			callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			bot.Request(callbackResponse)
			return
		}
		
		// –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏
		defer func() {
			if err := GlobalRateLimiter.FinishOperation(userID, OPERATION_CANCEL, data.LessonID); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ rate limiting: %v", err)
			}
		}()
	}

	studentID, err := getStudentID(db, int(query.From.ID))
	if err != nil {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞")
		bot.Request(callbackResponse)
		return
	}

	err = unenrollStudentFromDB(db, studentID, data.LessonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: %v", err)
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏")
		bot.Request(callbackResponse)
		return
	}

	callbackResponse := tgbotapi.NewCallback(query.ID, "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
	bot.Request(callbackResponse)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	updateLessonMessage(bot, query.Message, db, data.LessonID)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
	notifyNextInWaitlist(bot, db, data.LessonID)
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
func handleWaitlistCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, data *CallbackData, userRole string) {
	if userRole != "student" {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
		bot.Request(callbackResponse)
		return
	}

	// ========================= RATE LIMITING =========================
	userID := query.From.ID
	if GlobalRateLimiter != nil {
		allowed, reason := GlobalRateLimiter.IsOperationAllowed(userID, OPERATION_WAITLIST, data.LessonID)
		if !allowed {
			callbackResponse := tgbotapi.NewCallback(query.ID, reason.Error())
			bot.Request(callbackResponse)
			return
		}
		
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
		if err := GlobalRateLimiter.StartOperation(userID, OPERATION_WAITLIST, data.LessonID); err != nil {
			callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			bot.Request(callbackResponse)
			return
		}
		
		// –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏
		defer func() {
			if err := GlobalRateLimiter.FinishOperation(userID, OPERATION_WAITLIST, data.LessonID); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ rate limiting: %v", err)
			}
		}()
	}

	studentID, err := getStudentID(db, int(query.From.ID))
	if err != nil {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞")
		bot.Request(callbackResponse)
		return
	}

	err = addToWaitlist(db, studentID, data.LessonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è: %v", err)
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
		bot.Request(callbackResponse)
		return
	}

	callbackResponse := tgbotapi.NewCallback(query.ID, "‚è≥ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
	bot.Request(callbackResponse)
}

// –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π) - –Ω–æ–≤–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
func handleNewCancelLessonCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, data *CallbackData, userRole string) {
	if userRole != "teacher" && userRole != "admin" {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å —É—Ä–æ–∫–∏")
		bot.Request(callbackResponse)
		return
	}

	// –î–ª—è —É—á–∏—Ç–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏—Ö —É—Ä–æ–∫
	if userRole == "teacher" {
		teacherID, err := getTeacherID(db, int(query.From.ID))
		if err != nil || !isTeacherLesson(db, teacherID, data.LessonID) {
			callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏")
			bot.Request(callbackResponse)
			return
		}
	}

	err := cancelLessonInDB(db, data.LessonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞: %v", err)
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞")
		bot.Request(callbackResponse)
		return
	}

	callbackResponse := tgbotapi.NewCallback(query.ID, "‚úÖ –£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω")
	bot.Request(callbackResponse)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	notifyStudentsAboutCancellation(bot, db, data.LessonID)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	updateCancelledLessonMessage(bot, query.Message)
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π)
func handleConfirmLessonCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, data *CallbackData, userRole string) {
	if userRole != "teacher" && userRole != "admin" {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —É—Ä–æ–∫–∏")
		bot.Request(callbackResponse)
		return
	}

	callbackResponse := tgbotapi.NewCallback(query.ID, "‚úÖ –£—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
	bot.Request(callbackResponse)

	// –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞
	sendMessage(bot, query.Message.Chat.ID, "‚úÖ –£—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
}

// –ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback
func handleScheduleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, data *CallbackData, userRole string) {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	sendScheduleWithButtons(bot, query.Message.Chat.ID, db, userRole)
	
	callbackResponse := tgbotapi.NewCallback(query.ID, "üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
	bot.Request(callbackResponse)
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ
func handleLessonInfoCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB, data *CallbackData, userRole string) {
	lessonInfo, err := getLessonInfo(db, data.LessonID)
	if err != nil {
		callbackResponse := tgbotapi.NewCallback(query.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
		bot.Request(callbackResponse)
		return
	}

	sendMessage(bot, query.Message.Chat.ID, lessonInfo)
	
	callbackResponse := tgbotapi.NewCallback(query.ID, "")
	bot.Request(callbackResponse)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Ä–æ–∫–æ–º
func updateLessonMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB, lessonID int) {
	lessonText, keyboard := getLessonWithButtons(db, lessonID, 0) // 0 = –ª—é–±–∞—è —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	
	editMsg := tgbotapi.NewEditMessageText(message.Chat.ID, message.MessageID, lessonText)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard
	bot.Send(editMsg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
func handleConfirmDeleteLessonCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	parts := strings.Split(query.Data, ":")
	if len(parts) != 2 {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
		return
	}
	
	lessonID, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	var subjectName, teacherName string
	var startTime time.Time
	var enrolledCount int
	
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time,
			(SELECT COUNT(*) FROM enrollments WHERE lesson_id = l.id AND status = 'enrolled') as enrolled_count
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime, &enrolledCount)
	
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userID := query.From.ID
	var role string
	err = db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
		
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")
		return
	}
	
	// –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏—Ö —É—Ä–æ–∫
	if role == "teacher" {
		var teacherID int
		err = db.QueryRow(`
			SELECT t.id FROM teachers t 
			JOIN users u ON t.user_id = u.id 
			WHERE u.tg_id = $1`, strconv.FormatInt(userID, 10)).Scan(&teacherID)
		
		if err != nil {
			sendMessage(bot, query.Message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
			return
		}
		
		var lessonTeacherID int
		err = db.QueryRow("SELECT teacher_id FROM lessons WHERE id = $1", lessonID).Scan(&lessonTeacherID)
		if err != nil || lessonTeacherID != teacherID {
			sendMessage(bot, query.Message.Chat.ID, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏")
			return
		}
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
	confirmText := fmt.Sprintf("‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞**\n\n"+
		"üìö **–ü—Ä–µ–¥–º–µ—Ç:** %s\n"+
		"üë®‚Äçüè´ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:** %s\n"+
		"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** %s\n"+
		"üë• **–ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:** %d\n\n"+
		"‚ùóÔ∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞!\n\n"+
		"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫?", 
		subjectName, teacherName, startTime.Format("02.01.2006 15:04"), enrolledCount)
	
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", fmt.Sprintf("execute_delete_lesson:%d", lessonID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_lesson"),
		},
	}
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	editMsg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, confirmText)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard
	bot.Send(editMsg)
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
func handleExecuteDeleteLessonCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, db *sql.DB) {
	parts := strings.Split(query.Data, ":")
	if len(parts) != 2 {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
		return
	}
	
	lessonID, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, query.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
	tempMessage := *query.Message
	tempMessage.Text = fmt.Sprintf("/delete_lesson %d", lessonID)
	tempMessage.From = query.From
	
	// –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
	if query.From != nil {
		var role string
		err = db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
			strconv.FormatInt(query.From.ID, 10)).Scan(&role)
			
		if err == nil && role == "superuser" {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
			handleDeleteLessonCommand(bot, &tempMessage, db)
		} else {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
			handleCancelLessonCommand(bot, &tempMessage, db)
		}
	}
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–º —É—Ä–æ–∫–æ–º
func updateCancelledLessonMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	text := "‚ùå **–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n–≠—Ç–æ—Ç —É—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
	
	editMsg := tgbotapi.NewEditMessageText(message.Chat.ID, message.MessageID, text)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}}
	bot.Send(editMsg)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–µ–∫—à–∏–º —É—Ä–æ–∫–æ–º
func updateMessageWithExpiredLesson(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	text := "‚è∞ **–£—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n–≠—Ç–æ—Ç —É—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø–∏—Å–∏."
	
	editMsg := tgbotapi.NewEditMessageText(message.Chat.ID, message.MessageID, text)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}}
	bot.Send(editMsg)
}
