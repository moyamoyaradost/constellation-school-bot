package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º (–®–∞–≥ 8.2 ROADMAP)
func handleNotifyStudentsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || role != "admin" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 3 {
		helpText := "üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞** (–®–∞–≥ 8.2)\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/notify_students <lesson_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/notify_students 15 –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ`\n" +
			"‚Ä¢ `/notify_students 22 –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã`\n\n" +
			"**–ü–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É—Ä–æ–∫\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/cancel_with_notification` - –æ—Ç–º–µ–Ω–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º\n" +
			"‚Ä¢ `/reschedule_with_notify` - –ø–µ—Ä–µ–Ω–æ—Å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º lesson_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	notificationText := strings.Join(args[2:], " ")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
	var subjectName, teacherName string
	var startTime string
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time::text
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime)
		
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞ —Å retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º
	sentCount, failedCount := notifyStudentsOfLesson(bot, db, lessonID, notificationText, subjectName, teacherName, startTime)
	
	// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	LogSystemAction(db, "notifications_sent", fmt.Sprintf("–£—Ä–æ–∫ %d (%s), –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –æ—à–∏–±–æ–∫: %d", lessonID, subjectName, sentCount, failedCount))
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã**\n\n" +
		"üìö –£—Ä–æ–∫: " + subjectName + " (" + startTime[:16] + ")\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n\n" +
		"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + strconv.Itoa(sentCount) + "\n" +
		"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: " + strconv.Itoa(failedCount) + "\n\n" +
		"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: " + notificationText
	
	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º (–®–∞–≥ 8.2 ROADMAP)
func handleCancelWithNotificationCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || (role != "admin" && role != "teacher") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 3 {
		helpText := "‚ùå **–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º** (–®–∞–≥ 8.2)\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/cancel_with_notification <lesson_id> <–ø—Ä–∏—á–∏–Ω–∞>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/cancel_with_notification 15 –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–±–æ–ª–µ–ª`\n" +
			"‚Ä¢ `/cancel_with_notification 22 –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞\n" +
			"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n" +
			"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/notify_students` - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
			"‚Ä¢ `/reschedule_with_notify` - –ø–µ—Ä–µ–Ω–æ—Å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º lesson_id –∏ –ø—Ä–∏—á–∏–Ω—É
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	reason := strings.Join(args[2:], " ")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
	var subjectName, teacherName string
	var startTime string
	var teacherID int
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time::text, l.teacher_id
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime, &teacherID)
		
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏)
	if role == "teacher" {
		var currentTeacherID int
		err = db.QueryRow(`
			SELECT t.id FROM teachers t 
			JOIN users u ON t.user_id = u.id 
			WHERE u.tg_id = $1`, userID).Scan(&currentTeacherID)
		
		if err != nil || currentTeacherID != teacherID {
			sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏")
			return
		}
	}
	
	// –û—Ç–º–µ–Ω—è–µ–º —É—Ä–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
	cancelLessonWithNotification(bot, db, lessonID, subjectName, teacherName, startTime, reason, message.Chat.ID)
}

// –ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–®–∞–≥ 8.2 ROADMAP)
func handleRescheduleWithNotifyCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", userID).Scan(&role)
	
	if err != nil || (role != "admin" && role != "teacher") {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	args := strings.Fields(message.Text)
	if len(args) < 3 {
		helpText := "üîÑ **–ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏** (–®–∞–≥ 8.2)\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/reschedule_with_notify <lesson_id> <–Ω–æ–≤–æ–µ_–≤—Ä–µ–º—è>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n" +
			"‚Ä¢ `/reschedule_with_notify 15 2025-08-15 18:00`\n" +
			"‚Ä¢ `/reschedule_with_notify 22 2025-08-16 19:30`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è\n" +
			"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n" +
			"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ\n\n" +
			"**–°–º. —Ç–∞–∫–∂–µ:**\n" +
			"‚Ä¢ `/notify_students` - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
			"‚Ä¢ `/cancel_with_notification` - –æ—Ç–º–µ–Ω–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º lesson_id –∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	newTimeStr := args[2] + " " + args[3]
	newTime, err := time.Parse("2006-01-02 15:04", newTimeStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
	if newTime.Before(time.Now()) {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
	var subjectName, teacherName string
	var startTime string
	var teacherID int
	err = db.QueryRow(`
		SELECT s.name, u.full_name, l.start_time::text, l.teacher_id
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1 AND l.soft_deleted = false`, lessonID).Scan(&subjectName, &teacherName, &startTime, &teacherID)
		
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏)
	if role == "teacher" {
		var currentTeacherID int
		err = db.QueryRow(`
			SELECT t.id FROM teachers t 
			JOIN users u ON t.user_id = u.id 
			WHERE u.tg_id = $1`, userID).Scan(&currentTeacherID)
		
		if err != nil || currentTeacherID != teacherID {
			sendMessage(bot, message.Chat.ID, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Ä–æ–∫–∏")
			return
		}
	}
	
	// –ü–µ—Ä–µ–Ω–æ—Å–∏–º —É—Ä–æ–∫
	_, err = db.Exec(`
		UPDATE lessons 
		SET start_time = $1, updated_at = NOW() 
		WHERE id = $2`, newTime, lessonID)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–∞")
		return
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º
	notificationText := "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ " + newTime.Format("02.01.2006 15:04")
	sentCount, failedCount := notifyStudentsOfLesson(bot, db, lessonID, notificationText, subjectName, teacherName, newTime.Format("2006-01-02 15:04:05"))
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω**\n\n" +
		"üìö –£—Ä–æ–∫: " + subjectName + "\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
		"üïê –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: " + newTime.Format("02.01.2006 15:04") + "\n\n" +
		"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + strconv.Itoa(sentCount) + "\n" +
		"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + strconv.Itoa(failedCount)
	
	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∞ —Å retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º
func notifyStudentsOfLesson(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, message, subjectName, teacherName, startTime string) (int, int) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–∫
	rows, err := db.Query(`
		SELECT u.tg_id, u.full_name
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1 AND e.status = 'enrolled'`, lessonID)
		
	if err != nil {
		return 0, 0
	}
	defer rows.Close()
	
	var sentCount, failedCount int
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName string
		
		if err := rows.Scan(&studentTelegramID, &studentName); err != nil {
			failedCount++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ä–æ–∫–µ**\n\n" +
			"üìö –ü—Ä–µ–¥–º–µ—Ç: " + subjectName + "\n" +
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
			"üìÖ –í—Ä–µ–º—è: " + startTime[:16] + "\n\n" +
			"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: " + message
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º (3 –ø–æ–ø—ã—Ç–∫–∏)
		sent := false
		for i := 0; i < 3; i++ {
			if _, err := bot.Send(msg); err == nil {
				sent = true
				break
			}
		}
		
		if sent {
			sentCount++
		} else {
			failedCount++
		}
	}
	
	return sentCount, failedCount
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
func cancelLessonWithNotification(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, subjectName, teacherName, startTime, reason string, chatID int64) {
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	defer tx.Rollback()
	
	// –û—Ç–º–µ–Ω—è–µ–º —É—Ä–æ–∫
	_, err = tx.Exec(`
		UPDATE lessons 
		SET soft_deleted = true, updated_at = NOW() 
		WHERE id = $1`, lessonID)
	
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞")
		return
	}
	
	// –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏
	_, err = tx.Exec(`
		UPDATE enrollments 
		SET status = 'cancelled', updated_at = NOW() 
		WHERE lesson_id = $1`, lessonID)
	
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π")
		return
	}
	
	// –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
	_, err = tx.Exec(`
		DELETE FROM waitlist 
		WHERE lesson_id = $1`, lessonID)
	
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è")
		return
	}
	
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º
	notifyStudentsAboutCancellationWithReason(bot, db, lessonID, subjectName, teacherName, startTime, reason)
	
	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	resultText := "‚úÖ **–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n" +
		"üìö –£—Ä–æ–∫: " + subjectName + " (" + startTime[:16] + ")\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
		"üìù –ü—Ä–∏—á–∏–Ω–∞: " + reason + "\n\n" +
		"üì¢ –í—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
	
	msg := tgbotapi.NewMessage(chatID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func notifyStudentsAboutCancellationWithReason(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, subjectName, teacherName, startTime, reason string) {
	rows, err := db.Query(`
		SELECT u.tg_id, u.full_name
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1`, lessonID)
		
	if err != nil {
		return
	}
	defer rows.Close()
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName string
		
		if err := rows.Scan(&studentTelegramID, &studentName); err != nil {
			continue
		}
		
		notificationText := "‚ùå **–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞**\n\n" +
			"üìö –ü—Ä–µ–¥–º–µ—Ç: " + subjectName + "\n" +
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + teacherName + "\n" +
			"üìÖ –í—Ä–µ–º—è: " + startTime[:16] + "\n\n" +
			"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: " + reason + "\n\n" +
			"üíî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n" +
			"üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ —É—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /schedule"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
	}
}
