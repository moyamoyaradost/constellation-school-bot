package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
func handleRestoreLessonCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤")
		return
	}
	
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		helpText := "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞**\n\n" +
			"**–§–æ—Ä–º–∞—Ç:** `/restore_lesson <lesson_id>`\n\n" +
			"**–ü—Ä–∏–º–µ—Ä:** `/restore_lesson 15`\n\n" +
			"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n" +
			"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞\n" +
			"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n" +
			"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏\n\n" +
			"**–í–Ω–∏–º–∞–Ω–∏–µ:** –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏!"
		
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}
	
	lessonIDStr := args[1]
	lessonID, err := strconv.Atoi(lessonIDStr)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
	var lessonData struct {
		ID          int
		SubjectName string
		TeacherName string
		StartTime   string
		IsActive    bool
		TeacherID   int
	}
	err = db.QueryRow(`
		SELECT l.id, s.name, u.full_name, l.start_time::text, l.is_active, l.teacher_id
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN teachers t ON l.teacher_id = t.id
		LEFT JOIN users u ON t.user_id = u.id
		WHERE l.id = $1`, lessonID).Scan(&lessonData.ID, &lessonData.SubjectName, &lessonData.TeacherName, &lessonData.StartTime, &lessonData.IsActive, &lessonData.TeacherID)
	
	if err == sql.ErrNoRows {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	} else if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–∞")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω
	if lessonData.IsActive {
		sendMessage(bot, message.Chat.ID, "‚ùå –£—Ä–æ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
	var teacherActive bool
	err = db.QueryRow(`
		SELECT t.soft_deleted = false AND u.is_active = true
		FROM teachers t
		JOIN users u ON t.user_id = u.id
		WHERE t.id = $1`, lessonData.TeacherID).Scan(&teacherActive)
	
	if err != nil || !teacherActive {
		sendMessage(bot, message.Chat.ID, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
		return
	}
	
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	defer tx.Rollback()
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–∫
	_, err = tx.Exec(`
		UPDATE lessons 
		SET soft_deleted = false, updated_at = NOW() 
		WHERE id = $1`, lessonID)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞")
		return
	}
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	_, err = tx.Exec(`
		UPDATE enrollments 
		SET status = 'enrolled', updated_at = NOW() 
		WHERE lesson_id = $1 AND status = 'cancelled'`, lessonID)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π")
		return
	}
	
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(); err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º
	sent, failed := notifyPreviouslyEnrolledStudents(bot, db, lessonID, lessonData)
	
	// –û—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
	resultText := "‚úÖ **–£—Ä–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n" +
		"üìö –£—Ä–æ–∫: " + lessonData.SubjectName + " (" + lessonData.StartTime[:16] + ")\n" +
		"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + lessonData.TeacherName + "\n" +
		"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n" +
		"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–∫\n" +
		"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n" +
		"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: " + strconv.Itoa(sent) + "\n" +
		"‚Ä¢ –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + strconv.Itoa(failed) + "\n\n" +
		"üéâ –£—Ä–æ–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏!"
	
	msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func handleMyStudentsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *sql.DB) {
	userID := message.From.ID
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var role string
	err := db.QueryRow("SELECT role FROM users WHERE tg_id = $1", 
		strconv.FormatInt(userID, 10)).Scan(&role)
	
	if err != nil || role != "superuser" {
		sendMessage(bot, message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∏—Ö –∑–∞–ø–∏—Å—è–º–∏
	rows, err := db.Query(`
		SELECT s.id, u.full_name, u.tg_id, u.is_active,
			COUNT(e.id) as total_enrollments,
			COUNT(CASE WHEN e.status = 'enrolled' THEN 1 END) as active_enrollments,
			COUNT(CASE WHEN e.status = 'cancelled' THEN 1 END) as cancelled_enrollments
		FROM students s
		JOIN users u ON s.user_id = u.id
		LEFT JOIN enrollments e ON s.id = e.student_id
		WHERE s.soft_deleted = false
		GROUP BY s.id, u.full_name, u.tg_id, u.is_active
		ORDER BY u.full_name`)
	
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
		return
	}
	defer rows.Close()
	
	var studentsText strings.Builder
	studentsText.WriteString("üë®‚Äçüéì **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**\n\n")
	
	var studentCount int
	for rows.Next() {
		var id int
		var fullName, tgID string
		var isActive bool
		var totalEnrollments, activeEnrollments, cancelledEnrollments int
		
		if err := rows.Scan(&id, &fullName, &tgID, &isActive, &totalEnrollments, &activeEnrollments, &cancelledEnrollments); err != nil {
			continue
		}
		
		status := "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
		if !isActive {
			status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
		}
		
		studentsText.WriteString(fmt.Sprintf("**%d.** %s\n", id, fullName))
		studentsText.WriteString(fmt.Sprintf("   üÜî ID: %s\n", tgID))
		studentsText.WriteString(fmt.Sprintf("   üìä –°—Ç–∞—Ç—É—Å: %s\n", status))
		studentsText.WriteString(fmt.Sprintf("   üìö –ó–∞–ø–∏—Å–µ–π: %d (–∞–∫—Ç–∏–≤–Ω—ã—Ö: %d, –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: %d)\n\n", totalEnrollments, activeEnrollments, cancelledEnrollments))
		
		studentCount++
	}
	
	if studentCount == 0 {
		studentsText.WriteString("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
	} else {
		studentsText.WriteString(fmt.Sprintf("**–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:** %d", studentCount))
	}
	
	msg := tgbotapi.NewMessage(message.Chat.ID, studentsText.String())
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// notifyPreviouslyEnrolledStudents - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞
func notifyPreviouslyEnrolledStudents(bot *tgbotapi.BotAPI, db *sql.DB, lessonID int, lessonData struct {
	ID          int
	SubjectName string
	TeacherName string
	StartTime   string
	IsActive    bool
	TeacherID   int
}) (int, int) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	query := `
		SELECT u.tg_id, u.full_name
		FROM enrollments e
		JOIN students s ON e.student_id = s.id
		JOIN users u ON s.user_id = u.id
		WHERE e.lesson_id = $1 AND e.status = 'enrolled'`
	
	rows, err := db.Query(query, lessonID)
	if err != nil {
		return 0, 0
	}
	defer rows.Close()
	
	sent := 0
	failed := 0
	
	for rows.Next() {
		var studentTelegramID int64
		var studentName string
		
		if err := rows.Scan(&studentTelegramID, &studentName); err != nil {
			failed++
			continue
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		notificationText := "üéâ **–£–†–û–ö –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù!**\n\n" +
			"üìö –ü—Ä–µ–¥–º–µ—Ç: " + lessonData.SubjectName + "\n" +
			"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + lessonData.TeacherName + "\n" +
			"üìÖ –í—Ä–µ–º—è: " + lessonData.StartTime[:16] + "\n\n" +
			"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π - —É—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç—Å—è!\n" +
			"üéØ –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏!"
		
		msg := tgbotapi.NewMessage(studentTelegramID, notificationText)
		msg.ParseMode = "Markdown"
		
		// Retry –º–µ—Ö–∞–Ω–∏–∑–º (3 –ø–æ–ø—ã—Ç–∫–∏)
		success := false
		for attempt := 0; attempt < 3; attempt++ {
			if _, err := bot.Send(msg); err == nil {
				success = true
				break
			}
			time.Sleep(500 * time.Millisecond)
		}
		
		if success {
			sent++
		} else {
			failed++
		}
	}
	
	return sent, failed
}
