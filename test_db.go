package main

import (
	"fmt"
	"log"
	
	"github.com/joho/godotenv"
	"constellation-school-bot/internal/config"
	"constellation-school-bot/internal/database"
)

func main() {
	fmt.Println("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
	}
	
	cfg := config.Load()
	fmt.Printf("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î: %s:%s@%s:%s/%s\n", 
		cfg.DBUser, "***", cfg.DBHost, cfg.DBPort, cfg.DBName)
	
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
	db, err := database.Connect(cfg)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	defer db.Close()
	
	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
	var tableCount int
	err = db.QueryRow(`
		SELECT COUNT(*) 
		FROM information_schema.tables 
		WHERE table_schema = 'public'`).Scan(&tableCount)
	
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü: %v\n", err)
	} else {
		fmt.Printf("üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: %d\n", tableCount)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
	var subjectCount int
	err = db.QueryRow("SELECT COUNT(*) FROM subjects").Scan(&subjectCount)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %v\n", err)
	} else {
		fmt.Printf("üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %d\n", subjectCount)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	var userCount int
	err = db.QueryRow("SELECT COUNT(*) FROM users").Scan(&userCount)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v\n", err)
	} else {
		fmt.Printf("üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n", userCount)
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
	fmt.Println("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:")
	rows, err := db.Query("SELECT name, code, category FROM subjects ORDER BY id")
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %v\n", err)
	} else {
		defer rows.Close()
		for rows.Next() {
			var name, code, category string
			if err := rows.Scan(&name, &code, &category); err != nil {
				continue
			}
			fmt.Printf("  ‚Ä¢ %s [%s] (%s)\n", name, code, category)
		}
	}
	
	fmt.Println("\nüéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
}
