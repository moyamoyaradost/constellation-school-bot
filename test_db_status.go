package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strings"

	_ "github.com/lib/pq"
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		dbURL = "postgres://constellation_user:constellation_pass@localhost:5433/constellation_db?sslmode=disable"
	}

	db, err := sql.Open("postgres", dbURL)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	if err = db.Ping(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: %v", err)
	}

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞
	checkSchema(db)
	
	// –ü—Ä–æ–≤–µ—Ä–∏–º —É—Ä–æ–∫–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
	checkLessons(db)
	
	// –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–ø–∏—Å–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
	checkEnrollments(db)
}

func checkSchema(db *sql.DB) {
	fmt.Println("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
	
	// –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—ã
	tables := []string{"users", "students", "subjects", "teachers", "lessons", "enrollments"}
	for _, table := range tables {
		var count int
		err := db.QueryRow(fmt.Sprintf("SELECT COUNT(*) FROM %s", table)).Scan(&count)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã %s: %v\n", table, err)
		} else {
			fmt.Printf("‚úÖ –¢–∞–±–ª–∏—Ü–∞ %s: %d –∑–∞–ø–∏—Å–µ–π\n", table, count)
		}
	}
}

func checkLessons(db *sql.DB) {
	fmt.Println("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–∫–æ–≤:")
	
	rows, err := db.Query(`
		SELECT l.id, s.name, l.start_time, l.status, l.max_students,
			COUNT(CASE WHEN e.status IN ('pending', 'confirmed') THEN e.id END) as enrolled_count
		FROM lessons l
		JOIN subjects s ON l.subject_id = s.id
		LEFT JOIN enrollments e ON l.id = e.lesson_id
		WHERE l.status IN ('scheduled', 'cancelled')
		GROUP BY l.id, s.name, l.start_time, l.status, l.max_students
		ORDER BY l.start_time
		LIMIT 5
	`)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤: %v\n", err)
		return
	}
	defer rows.Close()

	fmt.Printf("%-5s %-15s %-20s %-10s %-8s %-10s\n", "ID", "–ü—Ä–µ–¥–º–µ—Ç", "–í—Ä–µ–º—è", "–°—Ç–∞—Ç—É—Å", "–ú–∞–∫—Å", "–ó–∞–ø–∏—Å–∞–Ω–æ")
	fmt.Println(strings.Repeat("-", 70))

	for rows.Next() {
		var id, maxStudents, enrolledCount int
		var subject, status string
		var startTime string
		
		err := rows.Scan(&id, &subject, &startTime, &status, &maxStudents, &enrolledCount)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —É—Ä–æ–∫–∞: %v\n", err)
			continue
		}
		
		fmt.Printf("%-5d %-15s %-20s %-10s %-8d %-10d\n", 
			id, subject, startTime[:16], status, maxStudents, enrolledCount)
	}
}

func checkEnrollments(db *sql.DB) {
	fmt.Println("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π:")
	
	rows, err := db.Query(`
		SELECT e.id, u.full_name, s.name, l.start_time, e.status
		FROM enrollments e
		JOIN students st ON e.student_id = st.id
		JOIN users u ON st.user_id = u.id
		JOIN lessons l ON e.lesson_id = l.id
		JOIN subjects s ON l.subject_id = s.id
		ORDER BY l.start_time
		LIMIT 10
	`)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: %v\n", err)
		return
	}
	defer rows.Close()

	fmt.Printf("%-5s %-20s %-15s %-20s %-10s\n", "ID", "–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–µ–¥–º–µ—Ç", "–í—Ä–µ–º—è", "–°—Ç–∞—Ç—É—Å")
	fmt.Println(strings.Repeat("-", 80))

	for rows.Next() {
		var id int
		var student, subject, status string
		var startTime string
		
		err := rows.Scan(&id, &student, &subject, &startTime, &status)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v\n", err)
			continue
		}
		
		fmt.Printf("%-5d %-20s %-15s %-20s %-10s\n", 
			id, student, subject, startTime[:16], status)
	}
}
