package tests

import (
	"database/sql"
	"testing"

	_ "github.com/lib/pq"
)

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
func TestInlineKeyboards(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
	// –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π UX —ç–ª–µ–º–µ–Ω—Ç—ã

	// –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
	studentMenuButtons := []struct {
		text string
		data string
	}{
		{"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"},
		{"üìö –ú–æ–∏ —É—Ä–æ–∫–∏", "my_lessons"},
		{"‚ùì –ü–æ–º–æ—â—å", "help"},
		{"üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile"},
	}

	teacherMenuButtons := []struct {
		text string
		data string
	}{
		{"üìÖ –ú–æ–∏ —É—Ä–æ–∫–∏", "my_lessons"},
		{"üë• –ú–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã", "my_students"},
		{"‚ûï –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫", "create_lesson"},
		{"‚ùì –ü–æ–º–æ—â—å", "help_teacher"},
	}

	adminMenuButtons := []struct {
		text string
		data string
	}{
		{"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "teachers"},
		{"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"},
		{"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notifications"},
		{"üìã –õ–æ–≥–∏", "logs"},
		{"‚ùì –ü–æ–º–æ—â—å", "help_admin"},
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
	if len(studentMenuButtons) != 4 {
		t.Errorf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 4, –ø–æ–ª—É—á–µ–Ω–æ %d", len(studentMenuButtons))
		return
	}
	t.Log("‚úÖ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
	if len(teacherMenuButtons) != 4 {
		t.Errorf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: –æ–∂–∏–¥–∞–ª–æ—Å—å 4, –ø–æ–ª—É—á–µ–Ω–æ %d", len(teacherMenuButtons))
		return
	}
	t.Log("‚úÖ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
	if len(adminMenuButtons) != 5 {
		t.Errorf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ %d", len(adminMenuButtons))
		return
	}
	t.Log("‚úÖ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ –∫–Ω–æ–ø–∫–∞—Ö
	for _, btn := range studentMenuButtons {
		if len(btn.text) < 3 {
			t.Errorf("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: %s", btn.text)
			return
		}
	}
	t.Log("‚úÖ –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–º–æ–¥–∑–∏")
}

// –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
func TestSubjectButtons(t *testing.T) {
	dsn := "host=localhost port=5433 user=constellation_user password=constellation_pass dbname=constellation_db sslmode=disable"
	
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		t.Skipf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %v", err)
		return
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î
	subjectButtons := []struct {
		text string
		code string
	}{
		{"üéÆ –ì–µ–π–º–¥–µ–≤", "GAMEDEV"},
		{"üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "WEB_DEV"},
		{"üé® –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω", "GRAPHIC_DESIGN"},
		{"üé¨ VFX-–¥–∏–∑–∞–π–Ω", "VFX_DESIGN"},
		{"üéØ 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "3D_MODELING"},
		{"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", "COMPUTER_LITERACY"},
	}

	for _, subject := range subjectButtons {
		var exists bool
		err = db.QueryRow("SELECT EXISTS(SELECT 1 FROM subjects WHERE code = $1)", subject.code).Scan(&exists)
		if err != nil {
			t.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ %s: %v", subject.code, err)
			continue
		}
		
		if !exists {
			t.Errorf("‚ùå –ü—Ä–µ–¥–º–µ—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î", subject.code)
			continue
		}
		t.Logf("‚úÖ –ü—Ä–µ–¥–º–µ—Ç %s (%s) –Ω–∞–π–¥–µ–Ω", subject.text, subject.code)
	}
}

// –¢–µ—Å—Ç UX —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
func TestMessageFormatting(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ –∏ Markdown

	testMessages := []struct {
		name     string
		message  string
		hasEmoji bool
		hasMarkdown bool
	}{
		{
			name:        "–£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å",
			message:     "‚úÖ **–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Ä–æ–∫!**\n\nüìö –£—Ä–æ–∫: –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
			hasEmoji:    true,
			hasMarkdown: true,
		},
		{
			name:        "–û—à–∏–±–∫–∞",
			message:     "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫",
			hasEmoji:    true,
			hasMarkdown: false,
		},
		{
			name:        "–°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è", 
			message:     "‚è≥ **–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è**\n\nüìã –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: 1",
			hasEmoji:    true,
			hasMarkdown: true,
		},
		{
			name:        "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			message:     "üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\nüìù **–ò–º—è:** Test User",
			hasEmoji:    true,
			hasMarkdown: true,
		},
	}

	for _, test := range testMessages {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏
		if test.hasEmoji {
			hasEmoji := false
			emojis := []string{"‚úÖ", "‚ùå", "‚è≥", "üìö", "üìã", "üë§", "üìù"}
			for _, emoji := range emojis {
				if containsString(test.message, emoji) {
					hasEmoji = true
					break
				}
			}
			if !hasEmoji {
				t.Errorf("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ '%s' –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏", test.name)
				continue
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Markdown
		if test.hasMarkdown {
			hasMarkdown := containsString(test.message, "**") || containsString(test.message, "*")
			if !hasMarkdown {
				t.Errorf("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ '%s' –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test.name)
				continue
			}
		}

		t.Logf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ '%s' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ", test.name)
	}
}

// –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é –ø–æ —Ä–æ–ª—è–º
func TestRoleBasedMenus(t *testing.T) {
	dsn := "host=localhost port=5433 user=constellation_user password=constellation_pass dbname=constellation_db sslmode=disable"
	
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		t.Skipf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %v", err)
		return
	}
	defer db.Close()

	// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
	testUsers := []struct {
		role     string
		tgID     string
		fullName string
		expectedButtons int
	}{
		{"student", "ux_test_student", "UX Test Student", 4},
		{"teacher", "ux_test_teacher", "UX Test Teacher", 4},
		{"superuser", "ux_test_admin", "UX Test Admin", 5},
	}

	// –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
	for _, user := range testUsers {
		_, _ = db.Exec("DELETE FROM students WHERE user_id IN (SELECT id FROM users WHERE tg_id = $1)", user.tgID)
		_, _ = db.Exec("DELETE FROM teachers WHERE user_id IN (SELECT id FROM users WHERE tg_id = $1)", user.tgID)
		_, _ = db.Exec("DELETE FROM users WHERE tg_id = $1", user.tgID)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	for _, user := range testUsers {
		_, err = db.Exec(`
			INSERT INTO users (tg_id, role, full_name, phone, is_active) 
			VALUES ($1, $2, $3, '+79001234567', true)`,
			user.tgID, user.role, user.fullName)
		if err != nil {
			t.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", user.role, err)
			continue
		}

		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
		var userRecordID int
		err = db.QueryRow("SELECT id FROM users WHERE tg_id = $1", user.tgID).Scan(&userRecordID)
		if err != nil {
			t.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", user.role, err)
			continue
		}

		if user.role == "student" {
			_, err = db.Exec("INSERT INTO students (user_id) VALUES ($1)", userRecordID)
			if err != nil {
				t.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
				continue
			}
		} else if user.role == "teacher" {
			_, err = db.Exec("INSERT INTO teachers (user_id) VALUES ($1)", userRecordID)
			if err != nil {
				t.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %v", err)
				continue
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var dbRole string
		err = db.QueryRow("SELECT role FROM users WHERE tg_id = $1", user.tgID).Scan(&dbRole)
		if err != nil {
			t.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", user.role, err)
			continue
		}

		if dbRole != user.role {
			t.Errorf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å: –æ–∂–∏–¥–∞–ª–æ—Å—å %s, –ø–æ–ª—É—á–µ–Ω–æ %s", user.role, dbRole)
			continue
		}

		t.Logf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–æ–ª—å—é", user.role)
	}

	// –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
	for _, user := range testUsers {
		var userRecordID int
		err = db.QueryRow("SELECT id FROM users WHERE tg_id = $1", user.tgID).Scan(&userRecordID)
		if err == nil {
			if user.role == "student" {
				_, _ = db.Exec("DELETE FROM students WHERE user_id = $1", userRecordID)
			} else if user.role == "teacher" {
				_, _ = db.Exec("DELETE FROM teachers WHERE user_id = $1", userRecordID)
			}
		}
		_, _ = db.Exec("DELETE FROM users WHERE tg_id = $1", user.tgID)
	}
}

// –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
func TestNavigationButtons(t *testing.T) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
	navigationButtons := []struct {
		text string
		data string
	}{
		{"üîô –ù–∞–∑–∞–¥", "back"},
		{"üè† –ì–ª–∞–≤–Ω–∞—è", "main_menu"},
		{"‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action"},
	}

	if len(navigationButtons) != 3 {
		t.Errorf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: –æ–∂–∏–¥–∞–ª–æ—Å—å 3, –ø–æ–ª—É—á–µ–Ω–æ %d", len(navigationButtons))
		return
	}

	for _, btn := range navigationButtons {
		if len(btn.text) < 3 {
			t.Errorf("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏: %s", btn.text)
			return
		}
		if len(btn.data) < 3 {
			t.Errorf("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏: %s", btn.data)
			return
		}
	}
	t.Log("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
func containsString(s, substr string) bool {
	return len(s) >= len(substr) && 
		   (s == substr || 
		   (len(s) > len(substr) && 
		   (s[:len(substr)] == substr || 
		   s[len(s)-len(substr):] == substr ||
		   containsSubstring(s, substr))))
}

func containsSubstring(s, substr string) bool {
	for i := 0; i <= len(s)-len(substr); i++ {
		if s[i:i+len(substr)] == substr {
			return true
		}
	}
	return false
}
