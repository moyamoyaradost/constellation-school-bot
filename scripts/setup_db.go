package main

import (
	"database/sql"
	"log"

	_ "github.com/lib/pq"
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∫–∞–∫ superuser –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã
	adminDSN := "host=localhost port=5433 user=postgres password=constellation_pass dbname=postgres sslmode=disable"
	
	db, err := sql.Open("postgres", adminDSN)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", err)
	}
	defer db.Close()

	// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	_, err = db.Exec("CREATE USER constellation_user WITH PASSWORD 'constellation_pass'")
	if err != nil {
		log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", err)
	}

	// –°–æ–∑–¥–∞—Ç—å –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	_, err = db.Exec("CREATE DATABASE constellation_db OWNER constellation_user")
	if err != nil {
		log.Println("–ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", err)
	}

	// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞
	_, err = db.Exec("GRANT ALL PRIVILEGES ON DATABASE constellation_db TO constellation_user")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤:", err)
	}

	log.Println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ë–î –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

	// –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π –ë–î
	targetDSN := "host=localhost port=5433 user=constellation_user password=constellation_pass dbname=constellation_db sslmode=disable"
	targetDB, err := sql.Open("postgres", targetDSN)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ constellation_db:", err)
	}
	defer targetDB.Close()

	// –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
	if err := createTables(targetDB); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:", err)
	}

	// –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
	if err := insertDefaultSubjects(targetDB); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
	}

	log.Println("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
	log.Println("üîó –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ pgAdmin: http://localhost:8080")
}

func createTables(db *sql.DB) error {
	tables := []string{
		`CREATE TABLE IF NOT EXISTS users (
			id SERIAL PRIMARY KEY,
			tg_id VARCHAR(100) UNIQUE NOT NULL,
			role VARCHAR(20) NOT NULL,
			full_name VARCHAR(255) NOT NULL,
			phone VARCHAR(20),
			is_active BOOLEAN DEFAULT true,
			created_at TIMESTAMP DEFAULT NOW()
		)`,
		
		`CREATE TABLE IF NOT EXISTS teachers (
			id SERIAL PRIMARY KEY,
			user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
			specializations TEXT[],
			description TEXT,
			max_students_per_lesson INTEGER DEFAULT 10
		)`,
		
		`CREATE TABLE IF NOT EXISTS students (
			id SERIAL PRIMARY KEY,
			user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
			selected_subjects INTEGER[]
		)`,
		
		`CREATE TABLE IF NOT EXISTS subjects (
			id SERIAL PRIMARY KEY,
			name VARCHAR(255) NOT NULL,
			code VARCHAR(50) UNIQUE NOT NULL,
			category VARCHAR(50) NOT NULL,
			default_duration INTEGER DEFAULT 90,
			description TEXT,
			competencies JSONB,
			is_active BOOLEAN DEFAULT true
		)`,
		
		`CREATE TABLE IF NOT EXISTS lessons (
			id SERIAL PRIMARY KEY,
			teacher_id INTEGER REFERENCES teachers(id),
			subject_id INTEGER REFERENCES subjects(id),
			start_time TIMESTAMP NOT NULL,
			duration_minutes INTEGER DEFAULT 90,
			max_students INTEGER DEFAULT 10,
			status VARCHAR(30) DEFAULT 'scheduled',
			created_by_superuser_id INTEGER REFERENCES users(id),
			created_at TIMESTAMP DEFAULT NOW()
		)`,
		
		`CREATE TABLE IF NOT EXISTS enrollments (
			id SERIAL PRIMARY KEY,
			student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
			lesson_id INTEGER REFERENCES lessons(id) ON DELETE CASCADE,
			status VARCHAR(30) DEFAULT 'scheduled',
			enrolled_at TIMESTAMP DEFAULT NOW(),
			confirmed_at TIMESTAMP,
			cancellation_reason TEXT,
			feedback TEXT
		)`,
	}

	for _, table := range tables {
		if _, err := db.Exec(table); err != nil {
			return err
		}
	}

	return nil
}

func insertDefaultSubjects(db *sql.DB) error {
	subjects := []struct {
		name, code, category, description string
	}{
		{
			name:        "3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
			code:        "3D_MODELING",
			category:    "digital_design",
			description: "–û—Å–Ω–æ–≤—ã 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
		},
		{
			name:        "–ì–µ–π–º–¥–µ–≤",
			code:        "GAMEDEV",
			category:    "programming",
			description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–≥—Ä",
		},
		{
			name:        "VFX-–¥–∏–∑–∞–π–Ω",
			code:        "VFX_DESIGN",
			category:    "digital_design",
			description: "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞",
		},
		{
			name:        "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω",
			code:        "GRAPHIC_DESIGN",
			category:    "design",
			description: "–û—Å–Ω–æ–≤—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞",
		},
		{
			name:        "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
			code:        "WEB_DEV",
			category:    "programming",
			description: "–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
		},
		{
			name:        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
			code:        "COMPUTER_LITERACY",
			category:    "basics",
			description: "–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º",
		},
	}

	for _, subject := range subjects {
		query := `INSERT INTO subjects (name, code, category, description) 
				  VALUES ($1, $2, $3, $4) 
				  ON CONFLICT (code) DO NOTHING`
		_, err := db.Exec(query, subject.name, subject.code, subject.category, subject.description)
		if err != nil {
			return err
		}
	}

	return nil
}
